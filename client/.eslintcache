[{"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\index.js":"1","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\reportWebVitals.js":"2","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\actions\\ActionsTypes.js":"3","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\OutOfStockTable.js":"4","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\InStockTable.js":"5","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\dashboard\\Dashboard.js":"6","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\reducers\\index.js":"7","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\RequestTableRow.js":"8","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\OrderTableRow.js":"9","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\reducers\\errorReducer.js":"10","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\reducers\\requestsReducer.js":"11","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\PurchaseForm.js":"12","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\DetailsComponent.js":"13","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\EditOutOfStockForm.js":"14","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\store.js":"15","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\actions\\ActionCreators.js":"16","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\HeaderComponent.js":"17","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\StatsComponent.js":"18","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\auth\\Login.js":"19","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\LoadingComponent.js":"20","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\OutOfStockTableRow.js":"21","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\reducers\\authReducer.js":"22","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\EditOrderForm.js":"23","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\ImgComponent.js":"24","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\EditLocation.js":"25","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\RequestForm.js":"26","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\RequestTable.js":"27","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\App.js":"28","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\layout\\Landing.js":"29","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\reducers\\inStockReducer.js":"30","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\PdfComponent.js":"31","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\EditStockForm.js":"32","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\FooterComponent.js":"33","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\OrderTable.js":"34","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\InStockTableRow.js":"35","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\DeliveredForm.js":"36","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\reducers\\ordersReducer.js":"37","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\reducers\\outStockReducer.js":"38","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\Pagination.js":"39","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\utils\\setAuthToken.js":"40","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\MainComponent.js":"41","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\NoItemsComponent.js":"42","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\auth\\Register.js":"43","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\dashboard\\Accordion.js":"44","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\dashboard\\textData.js":"45","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\PdfUpdateComponent.js":"46","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\InStockForm.js":"47"},{"size":711,"mtime":1613163874883,"results":"48","hashOfConfig":"49"},{"size":362,"mtime":1608514499315,"results":"50","hashOfConfig":"49"},{"size":1504,"mtime":1616625372596,"results":"51","hashOfConfig":"49"},{"size":4876,"mtime":1616800956505,"results":"52","hashOfConfig":"49"},{"size":6172,"mtime":1616800973630,"results":"53","hashOfConfig":"49"},{"size":2975,"mtime":1616776645113,"results":"54","hashOfConfig":"49"},{"size":483,"mtime":1614203464288,"results":"55","hashOfConfig":"49"},{"size":1381,"mtime":1616604659775,"results":"56","hashOfConfig":"49"},{"size":1454,"mtime":1614207656770,"results":"57","hashOfConfig":"49"},{"size":278,"mtime":1612458223981,"results":"58","hashOfConfig":"49"},{"size":1562,"mtime":1614115772982,"results":"59","hashOfConfig":"49"},{"size":6515,"mtime":1616649532305,"results":"60","hashOfConfig":"49"},{"size":13551,"mtime":1616653171405,"results":"61","hashOfConfig":"49"},{"size":5283,"mtime":1616649342417,"results":"62","hashOfConfig":"49"},{"size":465,"mtime":1612457297962,"results":"63","hashOfConfig":"49"},{"size":11043,"mtime":1616626502635,"results":"64","hashOfConfig":"49"},{"size":6882,"mtime":1613239339640,"results":"65","hashOfConfig":"49"},{"size":5375,"mtime":1616776534891,"results":"66","hashOfConfig":"49"},{"size":4855,"mtime":1613250935085,"results":"67","hashOfConfig":"49"},{"size":414,"mtime":1612575559161,"results":"68","hashOfConfig":"49"},{"size":1222,"mtime":1616655163900,"results":"69","hashOfConfig":"49"},{"size":584,"mtime":1612458171446,"results":"70","hashOfConfig":"49"},{"size":4450,"mtime":1616651788018,"results":"71","hashOfConfig":"49"},{"size":1856,"mtime":1613197574684,"results":"72","hashOfConfig":"49"},{"size":5970,"mtime":1616790041255,"results":"73","hashOfConfig":"49"},{"size":14270,"mtime":1616648923285,"results":"74","hashOfConfig":"49"},{"size":5579,"mtime":1616645524633,"results":"75","hashOfConfig":"49"},{"size":1233,"mtime":1613160989246,"results":"76","hashOfConfig":"49"},{"size":3171,"mtime":1616800045760,"results":"77","hashOfConfig":"49"},{"size":1957,"mtime":1616625475129,"results":"78","hashOfConfig":"49"},{"size":1857,"mtime":1613195982752,"results":"79","hashOfConfig":"49"},{"size":12211,"mtime":1616608184719,"results":"80","hashOfConfig":"49"},{"size":2078,"mtime":1612918053685,"results":"81","hashOfConfig":"49"},{"size":5256,"mtime":1616801011301,"results":"82","hashOfConfig":"49"},{"size":2357,"mtime":1616652996917,"results":"83","hashOfConfig":"49"},{"size":6655,"mtime":1614208623095,"results":"84","hashOfConfig":"49"},{"size":1524,"mtime":1614107456759,"results":"85","hashOfConfig":"49"},{"size":1112,"mtime":1614095771249,"results":"86","hashOfConfig":"49"},{"size":3363,"mtime":1614105724621,"results":"87","hashOfConfig":"49"},{"size":344,"mtime":1612456835311,"results":"88","hashOfConfig":"49"},{"size":2145,"mtime":1616699255327,"results":"89","hashOfConfig":"49"},{"size":355,"mtime":1612804087619,"results":"90","hashOfConfig":"49"},{"size":6057,"mtime":1613248381543,"results":"91","hashOfConfig":"49"},{"size":6368,"mtime":1614905292799,"results":"92","hashOfConfig":"49"},{"size":3627,"mtime":1614903941148,"results":"93","hashOfConfig":"49"},{"size":4407,"mtime":1616653774555,"results":"94","hashOfConfig":"49"},{"size":14043,"mtime":1616649123484,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"1ssnqwq",{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"113"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"101"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"98"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"104"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"104"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"104"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"104"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"104"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"113"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"113"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"104"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"104"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"101"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"113"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"104"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"113"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"113"},"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\index.js",[],["216","217"],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\reportWebVitals.js",[],["218","219"],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\actions\\ActionsTypes.js",[],["220","221"],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\OutOfStockTable.js",["222","223"],"import React, { Component } from \"react\";\r\nimport { OutOfStockTableRow } from \"./OutOfStockTableRow\";\r\n\r\nimport { fetchOutStock, addOutStock } from \"../actions/ActionCreators\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Loading } from \"./LoadingComponent\";\r\nimport { NoItemsComponent } from \"./NoItemsComponent\";\r\nimport Pagination from \"./Pagination\";\r\n\r\nimport { Transition, CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        auth: state.auth,\r\n        outstock: state.outstock  \r\n    };\r\n};\r\n  \r\nconst mapDispatchToProps = {\r\n    fetchOutStock: (pageData) => (fetchOutStock(pageData)),\r\n    addOutStock: (stock) => (addOutStock(stock)),\r\n};\r\n\r\nclass OutOfStockTable extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onChangePage = this.onChangePage.bind(this);\r\n    }\r\n    \r\n    onChangePage(newPage) {\r\n        const pageData = {\r\n            page: newPage\r\n        };\r\n        this.props.fetchOutStock(newPage);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const actualPage = this.props.outstock.page;\r\n        this.props.fetchOutStock(actualPage);        \r\n    }\r\n\r\n    render() {\r\n\r\n        const stagger = 200;\r\n\r\n        if (this.props.outstock.isLoading) {\r\n            return <Loading />\r\n        }\r\n        \r\n        if (this.props.outstock.errMess) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div class=\"row justify-content-center\">\r\n                        <div class=\"col-3 text-center\">\r\n                            <h4> { this.props.outstock.errMess } </h4>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return(\r\n            <div className=\"container-fluid\">\r\n                <table className=\"table table-sm table-striped table-boredered\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th colSpan=\"12\" className=\"bg-secondary text-white text-center h4 p-2\">\r\n                                ITEMS OUT OF STOCK     \r\n                            </th>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>Article</th>\r\n                            <th>Order Form</th>\r\n                            <th>Index</th>\r\n                            <th>Details</th>\r\n                            <th>Unit Cost</th>\r\n                            <th>Total Cost</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <TransitionGroup component={null}>\r\n                            {this.props.outstock.outstock.map((item, index) => \r\n                                <CSSTransition\r\n                                    key={ item._id }\r\n                                    in={true}\r\n                                    appear={true}\r\n                                    timeout={ stagger * index }\r\n                                    classNames=\"fade2\"\r\n                                    // timeout={{ enter: 2000, exit: 1000 }}\r\n                                    // classNames=\"fade\"\r\n                                >   \r\n                                    <OutOfStockTableRow \r\n                                        item={ item }\r\n                                        key={ item._id }  \r\n                                    />\r\n                                </CSSTransition>\r\n                            )}\r\n                        </TransitionGroup>\r\n                    </tbody>\r\n                </table>\r\n                {\r\n                    (this.props.outstock.pages === 0) \r\n                        ? (<NoItemsComponent />) \r\n                        : (  \r\n                            <div className=\"container\">\r\n                                <div className=\"row justify-content-center\">\r\n                                    <div className=\"col\"></div>\r\n                                    <div className=\"col text-center\">\r\n                                        <Pagination \r\n                                            numpage={this.props.outstock.page} \r\n                                            numpages={this.props.outstock.pages} \r\n                                            changePage={this.onChangePage}\r\n                                        />  \r\n                                    </div>\r\n                                    <div className=\"col\"></div>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(OutOfStockTable));","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\InStockTable.js",["224"],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\dashboard\\Dashboard.js",["225","226"],"import React, { Component } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { logoutUser } from \"../../actions/ActionCreators\";\r\n\r\nimport Accordion from \"./Accordion\";\r\n\r\nimport imageUrl from \"../../assets/images/dashboard_background.JPG\";\r\n\r\nclass Dashboard extends Component {\r\n  onLogoutClick = e => {\r\n    e.preventDefault();\r\n    this.props.logoutUser();\r\n  };\r\n\r\n  render() {\r\n    const { user } = this.props.auth;\r\n\r\n    return (\r\n\r\n        <React.Fragment>\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <br/>\r\n                        <br/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-1 col-xs-4\"></div>\r\n                    <div className=\"col-sm-4\">\r\n                        <h2 className=\"text-color-grey\"><b>Hey there,</b> {user.name.split(\" \")[0]}</h2>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <br/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-1 col-xs-4\"></div>\r\n                    <div className=\"col-sm-9\">\r\n                        {/* <Accordion />  */}\r\n                    </div>\r\n                    <div className=\"col\"></div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <br/>\r\n                        <br/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-4\"></div>\r\n                    <div className=\"col\">\r\n                        <img src={imageUrl} />\r\n                    </div>\r\n                    <div className=\"col\"></div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col\"></div>\r\n                    <div className=\"col-sm-9\">\r\n                        <hr/>\r\n                    </div>\r\n                    <div className=\"col\"></div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col\"></div>\r\n                    <div className=\"col-sm-9 text-center\">\r\n                        <Button outline onClick={this.onLogoutClick}>Logout</Button>\r\n                    </div>\r\n                    <div className=\"col\"></div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nDashboard.propTypes = {\r\n  logoutUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { logoutUser }\r\n)(Dashboard);\r\n\r\n",["227","228"],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\reducers\\index.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\RequestTableRow.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\OrderTableRow.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\reducers\\errorReducer.js",["229"],"import * as ActionTypes from \"../actions/ActionsTypes\";\r\n\r\nconst initialState = {};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ActionTypes.GET_ERRORS: \r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\reducers\\requestsReducer.js",["230","231","232","233"],"import * as ActionTypes from \"../actions/ActionsTypes\";\r\n\r\nexport const Requests = (state = {\r\n        isLoading: true, \r\n        errMess: null,\r\n        page: 1,\r\n        pages: 0,\r\n        requests: []\r\n    }, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.GET_REQUESTS_PAGES: \r\n            const pages = action.payload;\r\n            return {...state, \r\n                    page: pages.page, \r\n                    pages: pages.totalPages}\r\n        case ActionTypes.GET_REQUESTS:\r\n            const requests = action.payload;\r\n            //alert('case ActionTypes.GET_REQUESTS: ' + JSON.stringify(requests));\r\n            return {...state,     \r\n                    isLoading: false, \r\n                    errMess: null, \r\n                    requests: action.payload};            \r\n        case ActionTypes.REQUESTS_FAILED:\r\n            return {...state, \r\n                isLoading: false,\r\n                errMess: action.payload};     \r\n        case ActionTypes.ADD_REQUEST:\r\n            const request = action.payload;\r\n            //alert('case ActionTypes.ADD_REQUEST : ' + JSON.stringify(request));\r\n            return {...state, \r\n                    requests: state.requests.concat(request)}; \r\n            break;\r\n        case ActionTypes.DELETE_REQUEST:\r\n            const toDeleteId = action.payload;\r\n            return {...state, \r\n                    requests: state.requests.filter(request => request._id !== toDeleteId)}; \r\n            break;\r\n        default:\r\n            return state; \r\n            break;\r\n    }\r\n}\r\n\r\n","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\PurchaseForm.js",[],["234","235"],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\DetailsComponent.js",[],["236","237"],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\EditOutOfStockForm.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\store.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\actions\\ActionCreators.js",["238"],"import axios from \"axios\";\r\n//import url from \"url\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nimport * as ActionTypes from \"./ActionsTypes\";\r\n    \r\n// Register User\r\nexport const registerUser = (userData, history) => dispatch => {\r\n  axios\r\n    .post(\"/api/users/signup\", userData)\r\n    .then(res => history.push(\"/login\"))\r\n    .catch(err =>\r\n      dispatch({\r\n        type: ActionTypes.GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n\r\n// Login - get user token\r\nexport const loginUser = userData => dispatch => {\r\n  axios\r\n    .post(\"/api/users/login\", userData)\r\n    .then(res => {\r\n      // Save to localStorage\r\n\r\n      // Set token to localStorage\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch(err =>\r\n      dispatch({\r\n        type: ActionTypes.GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n\r\n};\r\n\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n  return {\r\n    type: ActionTypes.SET_CURRENT_USER,\r\n    payload: decoded\r\n  };\r\n};\r\n\r\n// User loading\r\nexport const setUserLoading = () => {\r\n  return {\r\n    type: ActionTypes.USER_LOADING\r\n  };\r\n};\r\n\r\n// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n  // Remove token from local storage\r\n  localStorage.removeItem(\"jwtToken\");\r\n  // Remove auth header for future requests\r\n  setAuthToken(false);\r\n  // Set current user to empty object {} which will set isAuthenticated to false\r\n  dispatch(setCurrentUser({}));\r\n};\r\n\r\n// REQUESTS\r\n\r\n// Get requests \r\nexport const fetchRequests = (pageDataReq) => dispatch => {\r\n  dispatch(requestsLoading()); \r\n\r\n  axios\r\n    .get(`/api/stock/requests/requests?page=${pageDataReq}`)\r\n    .then(response => {\r\n      return response.data;\r\n    })\r\n    .then(data => {\r\n      dispatch(getRequestPages(data.pages));\r\n      dispatch(getRequests(data.requests));\r\n    })\r\n    .catch(error => dispatch(requestsFailed(error.message)));\r\n};\r\n\r\nexport const requestsLoading = () => ({\r\n  type: ActionTypes.REQUESTS_LOADING\r\n});\r\n\r\nexport const getRequests = requests => ({\r\n  type: ActionTypes.GET_REQUESTS,\r\n  payload: requests\r\n}); \r\n\r\nexport const getRequestPages = pages => ({\r\n  type: ActionTypes.GET_REQUESTS_PAGES,\r\n  payload: pages\r\n}); \r\n\r\nexport const requestsFailed = errMess => ({\r\n  type: ActionTypes.REQUESTS_FAILED,\r\n  payload: errMess\r\n});\r\n\r\n// Add request \r\nexport const addRequest = (requestData) => dispatch => {\r\n  axios\r\n    .post(\"/api/stock/requests/addrequest\", requestData)\r\n    .then(response => {\r\n      return response.data;\r\n    })\r\n    .then(request => {\r\n      dispatch(addNewRequest(request));\r\n    })\r\n    .catch(err =>\r\n      {\r\n        alert('errore in add request!!!!! err = ' + err);\r\n        dispatch({\r\n          type: ActionTypes.GET_ERRORS,\r\n          payload: err.response.data\r\n        })  \r\n      }\r\n    );\r\n};\r\n\r\nexport const addNewRequest = request => ({\r\n  type: ActionTypes.ADD_REQUEST,\r\n  payload: request\r\n});\r\n\r\n\r\n// ORDERS\r\n\r\n// Get orders \r\nexport const fetchOrders = (pageDataOrder) => dispatch => {\r\n  dispatch(ordersLoading()); \r\n\r\n  axios\r\n    .get(`/api/stock/orders/orders?page=${pageDataOrder}`)\r\n    .then(response => {\r\n      return response.data;\r\n    })\r\n    .then(data => {\r\n      dispatch(getOrderPages(data.pages));\r\n      dispatch(getOrders(data.orders));\r\n    })\r\n    .catch(error => dispatch(ordersFailed(error.message)));\r\n};\r\n\r\nexport const ordersLoading = () => ({\r\n  type: ActionTypes.ORDERS_LOADING\r\n});\r\n\r\nexport const getOrders = orders => ({\r\n  type: ActionTypes.GET_ORDERS,\r\n  payload: orders\r\n}); \r\n\r\nexport const getOrderPages = pages => ({\r\n  type: ActionTypes.GET_ORDERS_PAGES,\r\n  payload: pages\r\n});\r\n\r\nexport const ordersFailed = errMess => ({\r\n  type: ActionTypes.ORDERS_FAILED,\r\n  payload: errMess\r\n});\r\n\r\n// Add order \r\nexport const addOrder = (orderData) => dispatch => {\r\n  axios\r\n    .post(\"/api/stock/orders/addorder\", orderData)\r\n    .then(response => {\r\n      return response.data;\r\n    })\r\n    .then(order => {\r\n      dispatch(addNewOrder(order));\r\n    })\r\n    .catch(err =>\r\n      {\r\n        alert('errore in add order!!!!! err = ' + err);\r\n        dispatch({\r\n          type: ActionTypes.GET_ERRORS,\r\n          payload: err.response.data\r\n        })  \r\n      }\r\n    );\r\n};\r\n\r\nexport const addNewOrder = order => ({\r\n  type: ActionTypes.ADD_ORDER,\r\n  payload: order \r\n});\r\n\r\n// delete old request \r\nexport const deleteRequest = (oldRequest_Id) => dispatch => {\r\n  // Remove old request after updating as an order \r\n  dispatch(deleteOldRequest(oldRequest_Id));\r\n};\r\n\r\nexport const deleteOldRequest = oldRequest_Id => ({\r\n  type: ActionTypes.DELETE_REQUEST,\r\n  payload: oldRequest_Id \r\n});\r\n\r\n// Edit order \r\nexport const editOrder = (formData) => dispatch => {\r\n  \r\n  axios\r\n    .post(\"/api/stock/orders/editorder\", formData)\r\n    .then(response => {\r\n      return response.data;\r\n    })\r\n    .then(order => {\r\n      dispatch(editedOrder(order));\r\n    })\r\n    .catch(err =>\r\n      {\r\n        alert('errore in edit order!!!!! err = ' + err);\r\n        dispatch({\r\n          type: ActionTypes.GET_ERRORS,\r\n          payload: err.response.data\r\n        })  \r\n      }\r\n    );\r\n};\r\n\r\nexport const editedOrder = order => ({\r\n  type: ActionTypes.EDIT_ORDER,\r\n  payload: order \r\n});\r\n\r\n// IN STOCK \r\n\r\n// Get in stock  \r\nexport const fetchInStock = (pageDataInstock) => dispatch => {\r\n  dispatch(instockLoading()); \r\n\r\n  axios\r\n    .get(`/api/stock/instock/instock?page=${pageDataInstock}`)\r\n    .then(response => {\r\n      return response.data;\r\n    })\r\n    .then(data => {\r\n      dispatch(getInstockPages(data.pages));\r\n      dispatch(getInStock(data.instock));\r\n    })\r\n    .catch(error => dispatch(instockFailed(error.message)));\r\n};\r\n\r\nexport const instockLoading = () => ({\r\n  type: ActionTypes.INSTOCK_LOADING\r\n});\r\n\r\nexport const getInStock = instock => ({\r\n  type: ActionTypes.GET_INSTOCK, \r\n  payload: instock\r\n}); \r\n\r\nexport const getInstockPages = pages => ({\r\n  type: ActionTypes.GET_INSTOCK_PAGES,\r\n  payload: pages\r\n}); \r\n\r\nexport const instockFailed = errMess => ({\r\n  type: ActionTypes.INSTOCK_FAILED,\r\n  payload: errMess\r\n});\r\n\r\n// Add in stock  \r\nexport const addInStock = (stockData) => dispatch => {\r\n  axios\r\n    .post(\"/api/stock/instock/addinstock\", stockData)\r\n    .then(response => {\r\n      return response.data;\r\n    })\r\n    .then(instock => {\r\n      dispatch(addNewInstock(instock));\r\n    })\r\n    .catch(err =>\r\n      {\r\n        alert('errore in add in stock!!!!! err = ' + err);\r\n        dispatch({\r\n          type: ActionTypes.GET_ERRORS,\r\n          payload: err.response.data\r\n        })  \r\n      }\r\n    );\r\n};\r\n\r\nexport const addNewInstock = instock => ({\r\n  type: ActionTypes.ADD_INSTOCK,  \r\n  payload: instock \r\n});\r\n\r\n// delete old request \r\nexport const deleteOrder = (oldOrder_Id) => dispatch => {\r\n  // Remove old order after updating as in stock \r\n  dispatch(deleteOldOrder(oldOrder_Id));\r\n};\r\n\r\nexport const deleteOldOrder = oldOrder_Id => ({\r\n  type: ActionTypes.DELETE_ORDER,\r\n  payload: oldOrder_Id  \r\n});\r\n\r\n// delete old in stock  \r\nexport const deleteInStock = (oldInstock_Id) => dispatch => {\r\n  // Remove old request after updating as an order \r\n  dispatch(deleteOldInstock(oldInstock_Id));\r\n};\r\n\r\nexport const deleteOldInstock = oldInstock_Id => ({\r\n  type: ActionTypes.DELETE_INSTOCK, \r\n  payload: oldInstock_Id \r\n});\r\n\r\n// Edit stock location \r\nexport const editLocation = (formData) => dispatch => {\r\n  \r\n  axios\r\n    .post(\"/api/stock/instock/editlocation\", formData)\r\n    .then(response => {\r\n      return response.data;\r\n    })\r\n    .then(stock => {\r\n      dispatch(editedLocation(stock));\r\n    })\r\n    .catch(err =>\r\n      {\r\n        alert('errore in edit LOCATION!!!!! err = ' + err);\r\n        dispatch({\r\n          type: ActionTypes.GET_ERRORS,\r\n          payload: err.response.data\r\n        })  \r\n      }\r\n    );\r\n};\r\n\r\nexport const editedLocation = stock => ({\r\n  type: ActionTypes.EDIT_LOCATION,\r\n  payload: stock  \r\n});\r\n\r\n// Edit stock details \r\nexport const editDetails = (formData) => dispatch => {\r\n  \r\n  axios\r\n    .post(\"/api/stock/instock/editdetails\", formData)\r\n    .then(response => {\r\n      return response.data;\r\n    })\r\n    .then(stock => {\r\n      dispatch(editedDetails(stock));\r\n    })\r\n    .catch(err =>\r\n      {\r\n        alert('errore in edit DETAILS!!!!! err = ' + err);\r\n        dispatch({\r\n          type: ActionTypes.GET_ERRORS,\r\n          payload: err.response.data\r\n        })  \r\n      }\r\n    );\r\n};\r\n\r\nexport const editedDetails = stock => ({\r\n  type: ActionTypes.EDIT_DETAILS,\r\n  payload: stock  \r\n});\r\n\r\n// Edit stock details \r\nexport const saveItem = (formData) => dispatch => {\r\n  \r\n  axios\r\n    .post(\"/api/stock/instock/saveinstock\", formData)\r\n    .then(response => {\r\n      return response.data;\r\n    })\r\n    .then(stock => {\r\n      dispatch(savedItem(stock));\r\n    })\r\n    .catch(err =>\r\n      {\r\n        alert('errore in edit saveItem!!!!! err = ' + err);\r\n        dispatch({\r\n          type: ActionTypes.GET_ERRORS,\r\n          payload: err.response.data\r\n        })  \r\n      }\r\n    );\r\n};\r\n\r\nexport const savedItem = stock => ({\r\n  type: ActionTypes.SAVE_ITEM,\r\n  payload: stock  \r\n});\r\n\r\n\r\n// OUT OF STOCK \r\n\r\n// Get out of stock  \r\nexport const fetchOutStock = (pageData) => dispatch => {\r\n  dispatch(outstockLoading()); \r\n  \r\n  const params = new URLSearchParams(pageData);\r\n  //console.log(\"params is \" + params);\r\n\r\n  axios\r\n    .get(`/api/stock/outstock/outstock?page=${pageData}`)\r\n    .then(response => {\r\n      return response.data;\r\n    })\r\n    .then(data => {\r\n      dispatch(getOutstockPages(data.pages));\r\n      dispatch(getOutStock(data.outstock));\r\n    })\r\n    .catch(error => dispatch(outstockFailed(error.message)));\r\n};\r\n\r\nexport const outstockLoading = () => ({\r\n  type: ActionTypes.OUTSTOCK_LOADING\r\n});\r\n\r\nexport const getOutStock = outstock => ({\r\n  type: ActionTypes.GET_OUTSTOCK, \r\n  payload: outstock\r\n}); \r\n\r\nexport const getOutstockPages = pages => ({\r\n  type: ActionTypes.GET_OUTSTOCK_PAGES,\r\n  payload: pages\r\n}); \r\n\r\nexport const outstockFailed = errMess => ({\r\n  type: ActionTypes.OUTSTOCK_FAILED,\r\n  payload: errMess\r\n});\r\n\r\n// Add out of stock  \r\nexport const addOutStock = (stockData) => dispatch => {\r\n  axios\r\n    .post(\"/api/stock/outstock/addoutstock\", stockData)\r\n    .then(response => {\r\n      return response.data;\r\n    })\r\n    .then(outstock => {\r\n      dispatch(addNewOutstock(outstock));\r\n    })\r\n    .catch(err =>\r\n      {\r\n        alert('errore in add out of stock!!!!! err = ' + err);\r\n        dispatch({\r\n          type: ActionTypes.GET_ERRORS,\r\n          payload: err.response.data\r\n        })  \r\n      }\r\n    );\r\n};\r\n\r\nexport const addNewOutstock = outstock => ({\r\n  type: ActionTypes.ADD_OUTSTOCK,  \r\n  payload: outstock \r\n});\r\n","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\HeaderComponent.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\StatsComponent.js",["239"],"import React, { Component } from \"react\";\r\n\r\nimport {Doughnut} from 'react-chartjs-2';\r\n\r\nimport axios from \"axios\";\r\n\r\nexport class StatsComponent extends Component { \r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            myData: [],\r\n        }\r\n        this.triggerQuery = this.triggerQuery.bind(this);\r\n    }\r\n\r\n    triggerQuery() {\r\n        const url = `/api/expenses`;\r\n\r\n        axios\r\n        .get(`/api/expenses`)\r\n        .then(response => {\r\n            return response.data;\r\n        })\r\n        .then(data => {\r\n            const entries = Object.keys(data);\r\n\r\n            let totalAmount = 0; \r\n    \r\n            for (let i = 0; i < entries.length; i++) {\r\n                totalAmount = totalAmount + Number(Object.values(data)[i]);  \r\n            }\r\n\r\n            for (let i = 0; i < entries.length; i++) {\r\n                                \r\n                if (entries[i] === 'reagents') {\r\n                    const actualAmount = Number(Object.values(data)[i]); \r\n                    let Percent = (Number(actualAmount.toFixed(2)) / Number(totalAmount.toFixed(2))) * 100; \r\n                    //let Percent = ((Math.round(actualAmount * 100) / 100) / (Math.round(totalAmount * 100) / 100) * 100); \r\n                    this.setState({\r\n                        myData: this.state.myData.concat({\r\n                            label: 'Reagents',\r\n                            value:  Number(Percent.toFixed(2)) //Object.values(data)[i]\r\n                        })\r\n                    });\r\n                }\r\n                if (entries[i] === 'animal') {\r\n                    const actualAmount = Number(Object.values(data)[i]); \r\n                    let Percent = (Number(actualAmount.toFixed(2)) / Number(totalAmount.toFixed(2))) * 100; \r\n\r\n                    this.setState({\r\n                        myData: this.state.myData.concat({\r\n                            label: 'Animal Facilities',\r\n                            value:  Number(Percent.toFixed(2)) //Object.values(data)[i]\r\n                        })\r\n                    });\r\n                }\r\n                if (entries[i] === 'consumables') {\r\n                    const actualAmount = Number(Object.values(data)[i]); \r\n                    let Percent = (Number(actualAmount.toFixed(2)) / Number(totalAmount.toFixed(2))) * 100; \r\n\r\n                    this.setState({\r\n                        myData: this.state.myData.concat({\r\n                            label: 'General Consumables',\r\n                            value: Number(Percent.toFixed(2)) //Object.values(data)[i]\r\n                        })\r\n                    });\r\n                }\r\n                if (entries[i] === 'microscope') {\r\n                    const actualAmount = Number(Object.values(data)[i]); \r\n                    let Percent = (Number(actualAmount.toFixed(2)) / Number(totalAmount.toFixed(2))) * 100; \r\n\r\n                    this.setState({\r\n                        myData: this.state.myData.concat({\r\n                            label: 'Microscope Accessories',\r\n                            value:  Number(Percent.toFixed(2)) //Object.values(data)[i]\r\n                        })\r\n                    });\r\n                }              \r\n            }\r\n\r\n            this.setState({\r\n                chartData:{\r\n                    labels: this.state.myData.map(d => d.label),\r\n                    datasets:[\r\n                        {\r\n                        label:'Population',\r\n                        data: this.state.myData.map(d => d.value),\r\n                        backgroundColor: [\r\n                            // 'rgba(255, 99, 132, 0.2)',\r\n                            // 'rgba(54, 162, 235, 0.2)',\r\n                            'rgba(255, 206, 86, 0.2)',\r\n                            'rgba(75, 192, 192, 0.2)',\r\n                            'rgba(153, 102, 255, 0.2)',\r\n                            'rgba(255, 159, 64, 0.2)',\r\n                        ],\r\n                        borderColor: [\r\n                            // 'rgba(255, 99, 132, 1)',\r\n                            // 'rgba(54, 162, 235, 1)',\r\n                            'rgba(255, 206, 86, 1)',\r\n                            'rgba(75, 192, 192, 1)',\r\n                            'rgba(153, 102, 255, 1)',\r\n                            'rgba(255, 159, 64, 1)',\r\n                        ],\r\n                        borderWidth: 1,\r\n                        }\r\n                    ]\r\n                }\r\n            });\r\n        })\r\n        .catch(error => alert('error! ' + error));\r\n    } \r\n\r\n    componentDidMount() {\r\n        this.triggerQuery();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row d-flex justify-content-center\">\r\n                    <div className=\"col\"></div>\r\n                    <div className=\"col-6 justify-content-center\">\r\n                        <h1>Total Expenditures Percentages</h1>\r\n                    </div>\r\n                    <div className=\"col\"></div>\r\n                </div>\r\n                <div>\r\n                    <br />\r\n                    <hr />\r\n                </div>\r\n                <Doughnut data={this.state.chartData} />\r\n                <div>\r\n                    <br />\r\n                    <br />\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n \r\n\r\n","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\auth\\Login.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\LoadingComponent.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\OutOfStockTableRow.js",["240"],"import React, { Component } from \"react\";\r\nimport PdfComponent from \"./PdfComponent\";\r\nimport Moment from \"react-moment\";\r\nimport PdfUpdateComponent from \"./PdfUpdateComponent\";\r\nimport DetailsComponent from \"./DetailsComponent\";\r\nimport NumberFormat from 'react-number-format';\r\n\r\nexport class OutOfStockTableRow extends Component {\r\n    render() {\r\n        let i = this.props.item;\r\n\r\n        return(\r\n            <tr>\r\n                <td> {i.id} </td>\r\n                <td> {i.article} </td>\r\n                <td> \r\n                    {i.pdfname ? (<PdfComponent item={i} />) : (<PdfUpdateComponent item={i} />)}\r\n                </td>\r\n                <td> {i.index} </td>\r\n                <td>\r\n                    <DetailsComponent item={i} />\r\n                </td>  \r\n                <td> <NumberFormat value={i.unitcost} displayType={'text'} thousandSeparator={true} prefix={'$'} /> </td>\r\n                <td> <NumberFormat value={i.totalcost} displayType={'text'} thousandSeparator={true} prefix={'$'} /> </td>\r\n                {/* <td> {i.totalcost / i.unitcost} <NumberFormat value={i.totalcost / i.unitcost} displayType={'text'} decimalSeparator={true} /> </td> */}\r\n            </tr>\r\n        );\r\n    }\r\n}","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\reducers\\authReducer.js",["241"],"import * as ActionTypes from \"../actions/ActionsTypes\";\r\n\r\nconst isEmpty = require(\"is-empty\");\r\n\r\nconst initialState = {\r\n  isAuthenticated: false,\r\n  user: {},\r\n  loading: false\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_CURRENT_USER:\r\n      return {\r\n        ...state,\r\n        isAuthenticated: !isEmpty(action.payload),\r\n        user: action.payload\r\n      };\r\n    case ActionTypes.USER_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\EditOrderForm.js",[],["242","243"],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\ImgComponent.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\EditLocation.js",["244"],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\RequestForm.js",["245"],"import React, { Component } from \"react\";\r\nimport { Button, Form, FormGroup, Input, Label, Modal, ModalHeader, ModalBody} from \"reactstrap\";\r\n// import { LocalForm, Control, Errors } from 'react-redux-form';\r\n// import NumberFormat from 'react-number-format';\r\n\r\nimport { fetchRequests } from \"../actions/ActionCreators\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// const required = val => val && val.length; \r\n// const maxLength = len => val => !val || (val.length <= len); \r\n// const minLength = len => val => val && (val.length >= len); \r\nconst isNumber = val => !isNaN(+val); \r\nconst isZero = val => val && (+val > 0);\r\n\r\nconst mapStateToProps = state => {\r\n    return { \r\n        requests: state.requests \r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    fetchRequests: (pageData) => (fetchRequests(pageData))\r\n};\r\n\r\nclass RequestForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isModalOpen: false,\r\n            isError: false, \r\n            article: \"\",\r\n            type: \"\",\r\n            index: \"\",\r\n            quantity: \"\",\r\n            unitcost: \"\",\r\n            unitsize: \"\",\r\n            vendor: \"\",\r\n            contact: \"\",\r\n            lastRequest: []\r\n        };\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.fetchLastRequest = this.fetchLastRequest.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this); \r\n\r\n        this.onChangeArticle = this.onChangeArticle.bind(this);\r\n        this.onChangeType = this.onChangeType.bind(this);\r\n        this.onChangeIndex = this.onChangeIndex.bind(this);\r\n        this.onChangeQuantity = this.onChangeQuantity.bind(this);\r\n        this.onChangeUnitcost = this.onChangeUnitcost.bind(this);\r\n        this.onChangeUnitsize = this.onChangeUnitsize.bind(this);\r\n        this.onChangeVendor = this.onChangeVendor.bind(this);\r\n        this.onChangeContact = this.onChangeContact.bind(this);\r\n    }\r\n    \r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen,\r\n            isError: false, \r\n            article: \"\",\r\n            typeofarticle: \"\",\r\n            index: \"\",\r\n            quantity: \"\",\r\n            unitcost: \"\",\r\n            unitsize: \"\",\r\n            vendor: \"\",\r\n            contact: \"\"\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.isModalOpen === false && this.state.isModalOpen === true) {\r\n            this.fetchLastRequest();\r\n        }\r\n    }\r\n\r\n    fetchLastRequest() {\r\n        const url = `/api/stock/requests/lastrequest`;\r\n\r\n        async function findLastItem() {\r\n            const response = await fetch(url);\r\n            const lastItem = await response.json();\r\n            return lastItem;    \r\n        } \r\n\r\n        findLastItem().then(item => {\r\n            this.setState({\r\n                lastRequest: item \r\n            });\r\n        });\r\n    } \r\n\r\n    onChangeArticle(e) {\r\n        e.preventDefault();\r\n        const article = e.target.value; \r\n\r\n        (article.length !== 0) ?\r\n        this.setState({ article: article }) : \r\n        this.setState({ article: \"\" }) \r\n    }\r\n\r\n    onChangeType(e) {\r\n        e.preventDefault();\r\n        const typeofarticle = e.target.value; \r\n\r\n        (typeofarticle.length !== 0) ?\r\n        this.setState({ typeofarticle: typeofarticle }) : \r\n        this.setState({ typeofarticle: \"\" }) \r\n    }\r\n\r\n    onChangeIndex(e) {\r\n        e.preventDefault();\r\n        const index = e.target.value; \r\n\r\n        (index.length !== 0) ?\r\n        this.setState({ index: index }) : \r\n        this.setState({ index: \"\" }) \r\n    }\r\n\r\n    onChangeQuantity(e) {\r\n        e.preventDefault();\r\n        const quantity = e.target.value; \r\n        (isZero(quantity)) ?\r\n        // (quantity !== 0) ?\r\n        this.setState({ quantity: quantity }) : \r\n        this.setState({ quantity: \"\" }) \r\n    }\r\n\r\n    onChangeUnitcost(e) {\r\n        e.preventDefault();\r\n        const unitcost = e.target.value; \r\n        (isZero(unitcost)) ?\r\n        // (unitcost.length !== 0) ?\r\n        this.setState({ unitcost: unitcost }) : \r\n        this.setState({ unitcost: \"\" }) \r\n    }\r\n\r\n    onChangeUnitsize(e) {\r\n        e.preventDefault();\r\n        const unitsize = e.target.value; \r\n\r\n        (unitsize.length !== 0) ?\r\n        this.setState({ unitsize: unitsize }) : \r\n        this.setState({ unitsize: \"\" }) \r\n    }\r\n\r\n    onChangeVendor(e) {\r\n        e.preventDefault();\r\n        const vendor = e.target.value; \r\n\r\n        (vendor.length !== 0) ?\r\n        this.setState({ vendor: vendor }) : \r\n        this.setState({ vendor: \"\" }) \r\n    }\r\n\r\n    onChangeContact(e) {\r\n        e.preventDefault();\r\n        const contact = e.target.value; \r\n\r\n        (contact.length !== 0) ?\r\n        this.setState({ contact: contact }) : \r\n        this.setState({ contact: \"\" }) \r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        if (!this.state.article || !this.state.typeofarticle || !this.state.index \r\n            || !this.state.quantity || !this.state.unitcost || !this.state.unitsize)\r\n        {   \r\n            return this.setState({\r\n                isError: true \r\n            });\r\n        }\r\n\r\n        const lastId = this.state.lastRequest[0];\r\n        const newId = lastId.id + 1; \r\n    \r\n        const newRequest = {\r\n            id: newId,  \r\n            //...values,\r\n            article: this.state.article,\r\n            typeofarticle: this.state.typeofarticle, \r\n            index: this.state.index, \r\n            quantity: this.state.quantity,\r\n            unitcost: this.state.unitcost,\r\n            unitsize: this.state.unitsize, \r\n            vendor: this.state.vendor, \r\n            contact: this.state.contact, \r\n            requestdate: new Date().toISOString(),\r\n            requestuser: this.props.auth.user.name\r\n        };\r\n\r\n        this.props.addRequest(newRequest);\r\n\r\n        const actualPage = this.props.requests.page\r\n        this.props.fetchRequests(actualPage);\r\n\r\n        this.toggleModal();\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return(\r\n            <div>\r\n                <Button outline onClick={this.toggleModal}>\r\n                    <span className=\"text-info\">Add a new Request</span> \r\n                </Button>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}>\r\n                        <h4 className=\"text-primary\">New Request</h4>\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <h5 className=\"text-info\">Mandatory Fields</h5>\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                            <FormGroup>\r\n                                <Label for=\"article\">Article: </Label>\r\n                                <Input type=\"text\" name=\"article\" id=\"article\" \r\n                                    value={this.state.location} onChange={this.onChangeArticle}\r\n                                    invalid={this.state.isError && !this.state.article}\r\n                                />\r\n                                {(this.state.isError && !this.state.article) ? (\r\n                                    <div>\r\n                                        <p className=\"text-danger\">Article description is required.</p>\r\n                                    </div>    \r\n                                ) : ( <div /> )}            \r\n                            </FormGroup>   \r\n                            <FormGroup>\r\n                                <Label for=\"index\">Index: </Label>\r\n                                <Input type=\"text\" name=\"index\" id=\"index\" \r\n                                    value={this.state.index} onChange={this.onChangeIndex}\r\n                                    invalid={this.state.isError && !this.state.index}\r\n                                />\r\n                                {(this.state.isError && !this.state.index) ? (\r\n                                    <div>\r\n                                        <p className=\"text-danger\">Index is required.</p>\r\n                                    </div>    \r\n                                ) : ( <div /> )}            \r\n                            </FormGroup>       \r\n                            <div className=\"row\">\r\n                                <div className=\"col-sm-6\">\r\n                                    <FormGroup>\r\n                                        <Label for=\"quantity\">Quantity: </Label>\r\n                                        <Input type=\"number\" name=\"quantity\" id=\"quantity\" \r\n                                            value={this.state.quantity} onChange={this.onChangeQuantity}\r\n                                            invalid={this.state.isError && !this.state.quantity}\r\n                                        />\r\n                                        {(this.state.isError && !this.state.quantity) ? (\r\n                                            <div>\r\n                                                <p className=\"text-danger\">Quantity is required.</p>\r\n                                            </div>    \r\n                                        ) : ( <div /> )}            \r\n                                    </FormGroup> \r\n                                </div>\r\n                                <div className=\"col-sm-6\">\r\n                                    <FormGroup>\r\n                                        <Label for=\"unitcost\">Unit Cost: </Label>\r\n                                        <Input type=\"number\" name=\"unitcost\" id=\"unitcost\" \r\n                                            value={this.state.unitcost} \r\n                                            onChange={this.onChangeUnitcost}\r\n                                            placeholder=\"$\"\r\n                                            invalid={this.state.isError && !this.state.unitcost}\r\n                                        />    \r\n                                        {(this.state.isError && !this.state.unitcost) ? (\r\n                                            <div>\r\n                                                <p className=\"text-danger\">Unit Cost is required.</p>\r\n                                            </div>    \r\n                                        ) : ( <div /> )}            \r\n                                    </FormGroup>\r\n                                </div>\r\n                            </div> \r\n                            <div className=\"row\">\r\n                                <div className=\"col-sm-6\">\r\n                                    <FormGroup>\r\n                                        <Label for=\"unitsize\">Unit Size: </Label>\r\n                                        <Input type=\"text\" name=\"unitsize\" id=\"unitsize\"\r\n                                            onChange={this.onChangeUnitsize}\r\n                                            invalid={this.state.isError && !this.state.unitsize}\r\n                                        />\r\n                                        {(this.state.isError && !this.state.unitsize) ? (\r\n                                            <div>\r\n                                                <p className=\"text-danger\">Unit size is required.</p>\r\n                                            </div>    \r\n                                        ) : ( <div /> )}            \r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"col-sm-6\">\r\n                                    <FormGroup>\r\n                                        <Label for=\"typeofarticle\">Type of Article: </Label>\r\n                                        <Input type=\"select\" name=\"typeofarticle\" id=\"typeofarticle\"\r\n                                            onChange={this.onChangeType}\r\n                                            invalid={this.state.isError && this.state.typeofarticle === \"\"}\r\n                                        >    \r\n                                            <option value=\"\">Select</option>\r\n                                            <option value=\"reagents\">Reagents</option>\r\n                                            <option value=\"animal\">Animal Facilities</option>\r\n                                            <option value=\"consumables\">General Consumables</option>\r\n                                            <option value=\"microscope\">Microscope Accessories</option>\r\n                                        </Input>\r\n                                        {(this.state.isError && !this.state.typeofarticle) ? (\r\n                                            <div>\r\n                                                <p className=\"text-danger\">Type of Article is required.</p>\r\n                                            </div>    \r\n                                        ) : ( <div /> )}            \r\n                                    </FormGroup>  \r\n                                </div>\r\n                            </div>\r\n                            <br/>\r\n                            <h5 className=\"text-info\">Optional Fields</h5>\r\n                            <FormGroup>\r\n                                <Label for=\"vendor\">Vendor: </Label>\r\n                                <Input type=\"text\" name=\"vendor\" id=\"vendor\" \r\n                                    value={this.state.vendor} onChange={this.onChangeVendor}\r\n                                />\r\n                            </FormGroup> \r\n                            <FormGroup>\r\n                                <Label for=\"contact\">Contact: </Label>\r\n                                <Input type=\"text\" name=\"contact\" id=\"contact\" \r\n                                    value={this.state.contact} onChange={this.onChangeContact}\r\n                                />\r\n                            </FormGroup> \r\n                            <br/>\r\n                            <Button type=\"submit\" color=\"primary\">Submit</Button> \r\n                        </Form>                        \r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(RequestForm));","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\RequestTable.js",["246"],"import React, { Component } from \"react\";\r\nimport RequestTableRow  from \"./RequestTableRow\";\r\nimport RequestForm from \"./RequestForm\";\r\n\r\nimport { fetchRequests, addRequest } from \"../actions/ActionCreators\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Loading } from \"./LoadingComponent\";\r\nimport { NoItemsComponent } from \"./NoItemsComponent\";\r\nimport Pagination from \"./Pagination\";\r\n\r\nimport { Transition, CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        auth: state.auth,\r\n        requests: state.requests \r\n    };\r\n};\r\n  \r\nconst mapDispatchToProps = {\r\n    fetchRequests: (pageData) => (fetchRequests(pageData)),\r\n    addRequest: (request) => (addRequest(request))\r\n};\r\n\r\nclass RequestTable extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onChangePage = this.onChangePage.bind(this);\r\n    }\r\n    \r\n    onChangePage(newPage) {\r\n        this.props.fetchRequests(newPage);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const pageData = this.props.requests.page;\r\n        this.props.fetchRequests(pageData);\r\n    }\r\n\r\n    render() {\r\n        \r\n        const arrReq = this.props.requests.requests;\r\n\r\n        const stagger = 200;\r\n\r\n        if (this.props.requests.isLoading) {\r\n            return <Loading />\r\n        }\r\n         \r\n        if (this.props.requests.errMess) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div class=\"row justify-content-center\">\r\n                        <div class=\"col-3 text-center\">\r\n                            <h4> { this.props.requests.errMess } </h4>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return(\r\n            <div className=\"container-fluid\">                \r\n                <table className=\"table table-sm table-striped table-boredered\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th colSpan=\"12\" className=\"bg-secondary text-white text-center h4 p-2\">\r\n                                REQUESTS BOARD       \r\n                            </th>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>Article</th>\r\n                            <th>Index</th>\r\n                            <th>Quantity</th>\r\n                            <th>Unit Cost</th>\r\n                            <th>Requested on</th>\r\n                            <th>Requested by</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <TransitionGroup component={null}>\r\n                            {this.props.requests.requests.map((r, index) => \r\n                                <CSSTransition\r\n                                    key={ r._id } \r\n                                    in={true}\r\n                                    appear={true}\r\n                                    timeout={ stagger * index }\r\n                                    classNames=\"fade2\"\r\n                                    // timeout={{ enter: 2000, exit: 1000 }}\r\n                                    // classNames=\"fade\"\r\n                                >   \r\n                                    <RequestTableRow \r\n                                        request={ r }\r\n                                        key={ r._id } \r\n                                        auth={ this.props.auth }\r\n                                        length={arrReq.length} \r\n                                    />\r\n                                </CSSTransition>\r\n                            )}\r\n                        </TransitionGroup>\r\n                    </tbody>\r\n                </table>\r\n                {\r\n                    (this.props.requests.pages === 0) ? (<NoItemsComponent />) : ( <div />)\r\n                }\r\n                <hr/>\r\n                <div className=\"container\">\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-3 text-center\">\r\n                            <RequestForm auth={ this.props.auth } addRequest={ this.props.addRequest }/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <hr/>\r\n                <br/>\r\n                {\r\n                    (this.props.requests.pages !== 0)  \r\n                        ? (  \r\n                            <div className=\"container\">\r\n                                <div className=\"row justify-content-center\">\r\n                                    <div className=\"col\"></div>\r\n                                    <div className=\"col-3 text-center\">\r\n                                        <Pagination \r\n                                            numpage={this.props.requests.page} \r\n                                            numpages={this.props.requests.pages} \r\n                                            changePage={this.onChangePage}\r\n                                        />  \r\n                                    </div>\r\n                                    <div className=\"col\"></div>\r\n                                </div>\r\n                            </div>\r\n                        ) \r\n                        : ( <div />)\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(RequestTable));","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\App.js",["247","248"],"import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { setCurrentUser, logoutUser } from \"./actions/ActionCreators\";\r\n\r\nimport jwt_decode from \"jwt-decode\";\r\nimport setAuthToken from \"./utils/setAuthToken\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";  \r\nimport './App.css';\r\n\r\nimport Main from \"./components/MainComponent\";\r\n\r\n// Check for token to keep user logged in\r\nif (localStorage.jwtToken) {\r\n  // Set auth token header auth\r\n  const token = localStorage.jwtToken;\r\n  setAuthToken(token);\r\n  // Decode token and get user info and exp\r\n  const decoded = jwt_decode(token);\r\n  // Set user and isAuthenticated\r\n  store.dispatch(setCurrentUser(decoded));\r\n  // Check for expired token\r\n  const currentTime = Date.now() / 1000; // to get in milliseconds\r\n  if (decoded.exp < currentTime) {\r\n    // Logout user\r\n    store.dispatch(logoutUser());\r\n\r\n    // Redirect to login\r\n    window.location.href = \"./login\";\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <Router>\r\n          <Main />\r\n        </Router>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\layout\\Landing.js",["249"],"import React, { Component } from \"react\";\r\nimport { Card, CardText, CardBody, CardTitle } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Landing extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n              <div className=\"col\">\r\n                  <br/>\r\n                  <br/>\r\n              </div>\r\n          </div>\r\n          <div className=\"row justify-content-md-center\">\r\n            <div className=\"col\"></div>\r\n            <div className=\"col-md-8\">\r\n                <Card>\r\n                  <CardBody>\r\n                    <CardTitle>\r\n                    <h2>\r\n                      <b>Demo version </b> of the inventory application\r\n                    </h2>\r\n                    </CardTitle>\r\n                    <CardText>\r\n                      <p className=\"flow-text grey-text text-darken-1\">\r\n                        Access via web and through your browser start managing your inventory\r\n                      </p>\r\n                      <h4><a href=\"https://github.com/christianbullo/inventoryapp/blob/master/README.md\" target=\"_blank\" class=\"text-info\"><i class=\"fa fa-github\"></i> Read me</a></h4>\r\n                      <br />\r\n                      <br />\r\n                    </CardText>\r\n                    <div className=\"row\">\r\n                      <div className=\"col s6\">\r\n                        <Link\r\n                          to=\"/register\"\r\n                          style={{\r\n                            width: \"140px\",\r\n                            borderRadius: \"3px\",\r\n                            letterSpacing: \"1.5px\"\r\n                          }}\r\n                          className=\"btn btn-large btn-outline-info\"\r\n                        >\r\n                          Register\r\n                        </Link>\r\n                      </div>\r\n                      <div />\r\n                      <div className=\"col s6\">\r\n                        <Link\r\n                          to=\"/login\"\r\n                          style={{\r\n                            width: \"140px\",\r\n                            borderRadius: \"3px\",\r\n                            letterSpacing: \"1.5px\"\r\n                          }}\r\n                          className=\"btn btn-large btn-outline-info\"\r\n                        >\r\n                          Log in \r\n                        </Link>\r\n                      </div>\r\n                    </div>\r\n                    {/* <CardText>\r\n                      <br />\r\n                      <p className=\"flow-text grey-text text-darken-1\">\r\n                        Access via web and through your browser start managing your inventory.\r\n                      </p>\r\n                    </CardText> */}\r\n                  </CardBody>  \r\n                </Card>\r\n            </div>\r\n            <div className=\"col\"></div>\r\n          </div>\r\n          <div className=\"row\">\r\n              <div className=\"col\">\r\n                  <br/>\r\n                  <br/>\r\n              </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Landing;\r\n","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\reducers\\inStockReducer.js",["250","251","252"],"import * as ActionTypes from \"../actions/ActionsTypes\";\r\n\r\nexport const Instock = (state = {\r\n        isLoading: true, \r\n        errMess: null,\r\n        page: 1,\r\n        pages: 0,\r\n        instock: []\r\n    }, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.GET_INSTOCK_PAGES:\r\n            const pages = action.payload;\r\n            return {...state, \r\n                    page: pages.page, \r\n                    pages: pages.totalPages}\r\n        case ActionTypes.GET_INSTOCK:\r\n            return {...state, \r\n                    isLoading: false, \r\n                    errMess: null, \r\n                    instock: action.payload};            \r\n        case ActionTypes.INSTOCK_FAILED: \r\n            return {...state, \r\n                isLoading: false,\r\n                errMess: action.payload};     \r\n        case ActionTypes.ADD_INSTOCK:\r\n                const instock = action.payload;\r\n            return {...state, \r\n                instock: state.instock.concat(instock)}; \r\n            break;\r\n        case ActionTypes.DELETE_INSTOCK:\r\n            const toDeleteId = action.payload;\r\n            return {...state, \r\n                instock: state.instock.filter(o => o._id !== toDeleteId)};\r\n        case ActionTypes.EDIT_LOCATION:\r\n            const toChangeItem = action.payload;\r\n            return {...state, \r\n                instock: state.instock.filter(o => o._id !== toChangeItem._id).concat(toChangeItem)}; \r\n        case ActionTypes.EDIT_DETAILS:\r\n            const toChangeDetails = action.payload;\r\n            return {...state, \r\n                instock: state.instock.filter(o => o._id !== toChangeDetails._id).concat(toChangeDetails)};         \r\n        case ActionTypes.SAVE_ITEM:\r\n            const saveinstock = action.payload;\r\n        return {...state, \r\n            instock: state.instock.concat(saveinstock)}; \r\n        break;\r\n        default:\r\n            return state; \r\n            break;\r\n    }\r\n}\r\n\r\n","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\PdfComponent.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\EditStockForm.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\FooterComponent.js",["253","254","255","256","257","258"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Footer(props) {\r\n    return (\r\n        <React.Fragment>\r\n            <div class=\"container\">\r\n                <div>\r\n                    <hr/>\r\n                </div>\r\n                <div>\r\n                    <br/>\r\n                </div>\r\n            </div>\r\n            <footer>\r\n                <div class=\"container\">\r\n                    <div class=\"row justify-content-center\">\r\n                        <div class=\"col col-xl-3 col-sm-2 vertical-line\">\r\n                            <h6>EXPLORE</h6>\r\n                            <ul class=\"list-unstyled\">\r\n                                <li><a href=\"http://biology.unm.edu/\" target=\"_blank\" class=\"text-dark\">UNM Biology</a></li>\r\n                                <li><a href=\"https://ceti.unm.edu/\" target=\"_blank\" class=\"text-dark\">UNM CETI</a></li>\r\n                                <li><a href=\"https://isdci.org/\" target=\"_blank\" class=\"text-dark\">ISDCI</a></li>\r\n                            </ul>\r\n                        </div>\r\n                        <div class=\"col col-xl-3 col-sm-2 vertical-line\">\r\n                        </div>\r\n                        <div class=\"col col-xl-3 col-sm-2 vertical-line\">\r\n                            <h7>FOLLOW</h7>\r\n                            <ul class=\"list-unstyled\">\r\n                                <li><a href=\"https://sites.google.com/site/irenesalinasremiro/about-me\" target=\"_blank\" class=\"text-dark\"><i class=\"fa fa-rss\"></i></a></li>\r\n                                <li><a href=\"https://twitter.com/drsalinaslab\" target=\"_blank\" class=\"text-dark\"><i class=\"fa fa-twitter\"></i></a></li>\r\n                            </ul>\r\n                        </div>\r\n                        <div class=\"vertical-line\"></div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <br />\r\n                        <br />\r\n                    </div>\r\n                </div>\r\n            </footer>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Footer;","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\OrderTable.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\InStockTableRow.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\DeliveredForm.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\reducers\\ordersReducer.js",["259","260","261","262"],"import * as ActionTypes from \"../actions/ActionsTypes\";\r\n\r\nexport const Orders = (state = {\r\n        isLoading: true, \r\n        errMess: null,\r\n        page: 1,\r\n        pages: 0,\r\n        orders: []\r\n    }, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.GET_ORDERS_PAGES:\r\n            const pages = action.payload;\r\n            return {...state, \r\n                    page: pages.page, \r\n                    pages: pages.totalPages}\r\n        case ActionTypes.GET_ORDERS:\r\n            return {...state, \r\n                    isLoading: false, \r\n                    errMess: null, \r\n                    orders: action.payload};            \r\n        case ActionTypes.ORDERS_FAILED:\r\n            return {...state, \r\n                isLoading: false,\r\n                errMess: action.payload};     \r\n        case ActionTypes.ADD_ORDER:\r\n            const order = action.payload;\r\n            return {...state, \r\n                    orders: state.orders.concat(order)}; \r\n            break;\r\n        case ActionTypes.EDIT_ORDER:\r\n            const editedOrder = action.payload;\r\n        return {...state, \r\n                orders: state.orders.filter(o => o._id !== editedOrder._id).concat(editedOrder)}; \r\n        break;\r\n        case ActionTypes.DELETE_ORDER:\r\n            const toDeleteId = action.payload; \r\n        return {...state, \r\n                orders: state.orders.filter(o => o._id !== toDeleteId)}; \r\n        break;\r\n        default:\r\n            return state; \r\n            break;\r\n    }\r\n}\r\n\r\n","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\reducers\\outStockReducer.js",["263","264"],"import * as ActionTypes from \"../actions/ActionsTypes\";\r\n\r\nexport const Outstock = (state = {\r\n        isLoading: true, \r\n        errMess: null,\r\n        page: 1,\r\n        pages: 0,\r\n        outstock: []\r\n    }, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.GET_OUTSTOCK_PAGES: \r\n            const pages = action.payload;\r\n            return {...state, \r\n                    page: pages.page, \r\n                    pages: pages.totalPages}\r\n        case ActionTypes.GET_OUTSTOCK:\r\n            return {...state, \r\n                    isLoading: false, \r\n                    errMess: null, \r\n                    outstock: action.payload};            \r\n        case ActionTypes.OUTSTOCK_FAILED: \r\n            return {...state, \r\n                isLoading: false,\r\n                errMess: action.payload};     \r\n        case ActionTypes.ADD_OUTSTOCK:\r\n            const outstock = action.payload;\r\n            return {...state, \r\n                    outstock: state.outstock.concat(outstock)}; \r\n            break;\r\n        default:\r\n            return state; \r\n            break;\r\n    }\r\n}\r\n\r\n","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\Pagination.js",["265"],"import React, { Component } from \"react\";\r\n\r\nconst Pagination = ({ numpage, numpages, changePage }) => {\r\n \r\n  let middlePagination;\r\n\r\n  let page = parseInt(numpage);\r\n  let pages = numpages;\r\n\r\n  if (pages <= 5) {\r\n    middlePagination = [...Array(pages)].map((_, idx) => (\r\n      <button\r\n        key={idx + 1}\r\n        onClick={() => changePage(idx + 1)}\r\n        disabled={page === idx + 1}\r\n      >\r\n        {idx + 1}  \r\n      </button>\r\n    ));\r\n  } else {\r\n    const startValue = Math.floor((page - 1) / 5) * 5;\r\n    const lastItem = [...Array(5)].length;\r\n    \r\n    middlePagination = (\r\n      <React.Fragment>\r\n        {[...Array(5)].map((_, idx) => (\r\n          <button\r\n            key={startValue + idx + 1}\r\n            disabled={page === startValue + idx + 1}\r\n            onClick={() => changePage(startValue + idx + 1)}\r\n          >\r\n            {startValue + idx + 1}  \r\n          </button>\r\n        ))}\r\n\r\n        <button onClick={() => changePage(lastItem + 1)}>...</button>\r\n        <button onClick={() => changePage(pages)}>{pages}</button>\r\n      </React.Fragment>\r\n    );\r\n\r\n    if (page > 5) {\r\n      if (pages - page >= 5) {\r\n        middlePagination = (\r\n          <React.Fragment>\r\n            <button onClick={() => changePage(1)}>1</button>\r\n            <button onClick={() => changePage(startValue - 1)}>...</button>\r\n            <button onClick={() => changePage(startValue)}>{startValue}</button>\r\n            {[...Array(5)].map((_, idx) => (\r\n              <button\r\n                key={startValue + idx + 1}\r\n                disabled={page === startValue + idx + 1}\r\n                onClick={() => changePage(startValue + idx + 1)}\r\n              >\r\n                {startValue + idx + 1} \r\n              </button>\r\n            ))}\r\n\r\n            <button onClick={() => changePage(startValue + 6)}>...</button>\r\n            <button onClick={() => changePage(pages)}>{pages}</button>\r\n          </React.Fragment>\r\n        );\r\n      } else {\r\n        let amountLeft = pages - page + 5;\r\n        middlePagination = (\r\n          <React.Fragment>\r\n            <button onClick={() => changePage(1)}>1</button>\r\n            <button onClick={() => changePage(startValue - 1)}>...</button>\r\n            <button onClick={() => changePage(startValue)}>{startValue}</button>\r\n            {[...Array(amountLeft)].map((_, idx) => (\r\n              <button\r\n                key={startValue + idx + 1}\r\n                disabled={page === startValue + idx + 1}\r\n                style={\r\n                  pages < startValue + idx + 1 ? { display: \"none\" } : null\r\n                }\r\n                onClick={() => changePage(startValue + idx + 1)}\r\n              >\r\n                {startValue + idx + 1} \r\n              </button>\r\n            ))}\r\n          </React.Fragment>\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    pages > 1 && (\r\n      <div className=\"pagination\">\r\n        <button\r\n          className=\"pagination__prev\"\r\n          onClick={() => changePage(page - 1)}\r\n          disabled={page === 1}\r\n        >\r\n          &#171;\r\n        </button>\r\n        {middlePagination}  \r\n        <button\r\n          className=\"pagination__next\"\r\n          onClick={() => changePage(page + 1)}\r\n          disabled={page === pages}\r\n        >\r\n          &#187;\r\n        </button>\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nexport default Pagination;","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\utils\\setAuthToken.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\MainComponent.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\NoItemsComponent.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\auth\\Register.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\dashboard\\Accordion.js",["266","267","268"],"import React, { Component } from \"react\";\r\nimport {  Button, Collapse, Card, CardBody, CardHeader, CardTitle, CardText } from \"reactstrap\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { groupBy, forEach } from \"lodash\";\r\nimport { textData } from \"./textData\";\r\n\r\nclass Accordion extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggle = this.toggle.bind(this);\r\n        this.state = { \r\n            collapseBanner: \"\", \r\n            collapseCycle: \"\", \r\n            collapseReleaseDate: \"\", \r\n            collapseLayout:\"\", \r\n            data:{} \r\n        };       \r\n    }\r\n\r\n    componentDidMount(){\r\n        // call prepare data after api call\r\n        this.prepareData(textData)\r\n    }\r\n      \r\n    prepareData(data){\r\n        \r\n        let dataG1 = groupBy(data,(d=>{\r\n            return d.banner_id\r\n        }));\r\n        \r\n        let dataG2= {};\r\n        \r\n        forEach(dataG1,(value,key)=>{\r\n            dataG2[key] = {};\r\n            let g2 = groupBy(value, (d => {\r\n                return d.cycle\r\n            }))\r\n        \r\n            forEach(g2,(v2,k2)=>{\r\n                let g3 = groupBy(v2, v3 => {\r\n                    return  v3.subtitle\r\n                })\r\n                dataG2[key][k2] = g3 \r\n            })\r\n        })\r\n        this.setState({data:dataG2});\r\n        alert('keys are: ' + Object.keys(dataG2));\r\n        alert('entries are: ' + JSON.stringify(Object.entries(dataG2)));\r\n    }\r\n    \r\n    toggle(e) {\r\n        let event = e.target.dataset.event;\r\n        let key = e.target.dataset.type;\r\n        switch(key){\r\n            case \"collapseBanner\":{\r\n                this.setState({ \r\n                    collapseBanner: event, \r\n                    collapseCycle: \"\", \r\n                    collapseReleaseDate: \"\", \r\n                    collapseLayout:\"\"});\r\n            break;\r\n          }\r\n            case \"collapseCycle\": {\r\n                this.setState({ \r\n                    collapseCycle: event, \r\n                    collapseReleaseDate: \"\", \r\n                    collapseLayout: \"\" });\r\n            break;\r\n          }\r\n            case \"collapseReleaseDate\": {\r\n                this.setState({ \r\n                    collapseReleaseDate: event, \r\n                    collapseLayout: \"\" });\r\n            break;\r\n          }\r\n            case \"collapseLayout\":{\r\n                this.setState({ collapseLayout: event });\r\n            break;\r\n          }\r\n          default: break;\r\n        }\r\n    }\r\n\r\n    renderLayouts(layouts) {\r\n        let result = [];\r\n        forEach(layouts, (layout, index) => {\r\n            result.push(\r\n            <Card style={{ marginBottom: '1rem' }} key={layout}>\r\n                <CardHeader \r\n                    onClick={this.toggle} \r\n                    data-event={layout.layout} \r\n                    data-type=\"collapseLayout\"\r\n                >\r\n                    {layout.layout_name}\r\n                </CardHeader>\r\n                <Collapse isOpen={this.state.collapseLayout === layout.layout}>\r\n                    <CardBody>\r\n                        render release form {layout.layout_name}\r\n                    </CardBody>\r\n                </Collapse>\r\n            </Card>\r\n            )\r\n        })\r\n        return result;\r\n    }\r\n\r\n    renderRelease(releases) {\r\n        let result = [];\r\n        forEach(releases, (release, releaseDate) => {\r\n            console.log(release);\r\n            result.push(\r\n                <Card style={{ marginBottom: '1rem' }} key={releaseDate}>\r\n                    <CardHeader \r\n                        onClick={this.toggle} \r\n                        data-event={releaseDate} \r\n                        data-type=\"collapseReleaseDate\"\r\n                    >\r\n                        {releaseDate}\r\n                    </CardHeader>\r\n                    <Collapse isOpen={this.state.collapseReleaseDate === releaseDate}>\r\n                        <CardBody>\r\n                            {this.renderLayouts(release)}\r\n                        </CardBody>\r\n                    </Collapse>\r\n                </Card>\r\n            )\r\n        })\r\n        return result;\r\n    }\r\n\r\n    renderCycles(cycles) {\r\n        let result = [];\r\n        forEach(cycles, (cycle, cycleId) => {\r\n            result.push(\r\n                <Card style={{ marginBottom: '1rem' }} key={cycleId}>\r\n                    <CardHeader \r\n                        onClick={this.toggle} \r\n                        data-event={cycleId} \r\n                        data-type=\"collapseCycle\"\r\n                    >\r\n                        {cycleId}\r\n                    </CardHeader>\r\n                    <Collapse isOpen={this.state.collapseCycle === cycleId}>\r\n                        <CardBody>\r\n                            {this.renderRelease(cycle)}\r\n                        </CardBody>\r\n                    </Collapse>\r\n                </Card>\r\n            )\r\n        })\r\n        return result;\r\n      }\r\n      renderBanner(){\r\n        let result = [];\r\n        forEach(this.state.data,(banners,bannerId)=>{\r\n            result.push( \r\n                <Card style={{ marginBottom: '1rem' }} key={bannerId}>\r\n                    <CardHeader \r\n                        onClick={this.toggle} \r\n                        data-event={bannerId} \r\n                        data-type=\"collapseBanner\"\r\n                        tag=\"h4\"\r\n                    >   \r\n                        {bannerId} bla bla bla {\" \"}\r\n                        {banners[bannerId]}\r\n                    </CardHeader>\r\n                    <Collapse isOpen={this.state.collapseBanner === bannerId}>\r\n                        <CardBody>\r\n                            {this.renderCycles(banners)}            \r\n                        </CardBody>\r\n                    </Collapse>\r\n                </Card>\r\n            )\r\n        })\r\n        return result;\r\n      }\r\n      render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {/* <h3 className=\"page-header\">Reactstrap Accordion using card component</h3> */}        \r\n                {this.renderBanner()}         \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nAccordion.propTypes = {\r\n  auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps\r\n)(Accordion);\r\n\r\n","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\dashboard\\textData.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\PdfUpdateComponent.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\client\\src\\components\\InStockForm.js",["269"],"import React, { Component } from \"react\";\r\nimport { Button, Form, FormGroup, Input, Label, Modal, ModalHeader, ModalBody} from \"reactstrap\";\r\n\r\nimport { fetchInStock, saveItem } from \"../actions/ActionCreators\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst isNumber = val => !isNaN(+val); \r\nconst isZero = val => val && (+val > 0);\r\n\r\nconst mapStateToProps = state => {\r\n    return { \r\n        instock: state.instock \r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    saveItem: (instock) => (saveItem(instock)),\r\n    fetchInStock: (pageData) => (fetchInStock(pageData))\r\n};\r\n\r\nclass InStockForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isModalOpen: false,\r\n            isError: false, \r\n            article: \"\",\r\n            type: \"\",\r\n            index: \"\",\r\n            quantity: \"\",\r\n            unitcost: \"\",\r\n            unitsize: \"\",\r\n            vendor: \"\",\r\n            contact: \"\",\r\n            lastRequest: []\r\n        };\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.fetchLastInstock = this.fetchLastInstock.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this); \r\n\r\n        this.onChangeArticle = this.onChangeArticle.bind(this);\r\n        this.onChangeType = this.onChangeType.bind(this);\r\n        this.onChangeIndex = this.onChangeIndex.bind(this);\r\n        this.onChangeQuantity = this.onChangeQuantity.bind(this);\r\n        this.onChangeUnitcost = this.onChangeUnitcost.bind(this);\r\n        this.onChangeUnitsize = this.onChangeUnitsize.bind(this);\r\n        this.onChangeVendor = this.onChangeVendor.bind(this);\r\n        this.onChangeContact = this.onChangeContact.bind(this);\r\n    }\r\n    \r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen,\r\n            isError: false, \r\n            article: \"\",\r\n            typeofarticle: \"\",\r\n            index: \"\",\r\n            quantity: \"\",\r\n            unitcost: \"\",\r\n            unitsize: \"\",\r\n            vendor: \"\",\r\n            contact: \"\"\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.isModalOpen === false && this.state.isModalOpen === true) {\r\n            this.fetchLastInstock();\r\n        }\r\n    }\r\n\r\n    fetchLastInstock() {\r\n        const url = `/api/stock/instock/lastinstock`;\r\n\r\n        async function findLastItem() {\r\n            const response = await fetch(url);\r\n            const lastItem = await response.json();\r\n            return lastItem;    \r\n        } \r\n\r\n        findLastItem().then(item => {\r\n            this.setState({\r\n                lastRequest: item \r\n            });\r\n        });\r\n    } \r\n\r\n    onChangeArticle(e) {\r\n        e.preventDefault();\r\n        const article = e.target.value; \r\n\r\n        (article.length !== 0) ?\r\n        this.setState({ article: article }) : \r\n        this.setState({ article: \"\" }) \r\n    }\r\n\r\n    onChangeType(e) {\r\n        e.preventDefault();\r\n        const typeofarticle = e.target.value; \r\n\r\n        (typeofarticle.length !== 0) ?\r\n        this.setState({ typeofarticle: typeofarticle }) : \r\n        this.setState({ typeofarticle: \"\" }) \r\n    }\r\n\r\n    onChangeIndex(e) {\r\n        e.preventDefault();\r\n        const index = e.target.value; \r\n\r\n        (index.length !== 0) ?\r\n        this.setState({ index: index }) : \r\n        this.setState({ index: \"\" }) \r\n    }\r\n\r\n    onChangeQuantity(e) {\r\n        e.preventDefault();\r\n        const quantity = e.target.value; \r\n        (isZero(quantity)) ?\r\n        // (quantity !== 0) ?\r\n        this.setState({ quantity: quantity }) : \r\n        this.setState({ quantity: \"\" }) \r\n    }\r\n\r\n    onChangeUnitcost(e) {\r\n        e.preventDefault();\r\n        const unitcost = e.target.value; \r\n        (isZero(unitcost)) ?\r\n        // (unitcost.length !== 0) ?\r\n        this.setState({ unitcost: unitcost }) : \r\n        this.setState({ unitcost: \"\" }) \r\n    }\r\n\r\n    onChangeUnitsize(e) {\r\n        e.preventDefault();\r\n        const unitsize = e.target.value; \r\n\r\n        (unitsize.length !== 0) ?\r\n        this.setState({ unitsize: unitsize }) : \r\n        this.setState({ unitsize: \"\" }) \r\n    }\r\n\r\n    onChangeVendor(e) {\r\n        e.preventDefault();\r\n        const vendor = e.target.value; \r\n\r\n        (vendor.length !== 0) ?\r\n        this.setState({ vendor: vendor }) : \r\n        this.setState({ vendor: \"\" }) \r\n    }\r\n\r\n    onChangeContact(e) {\r\n        e.preventDefault();\r\n        const contact = e.target.value; \r\n\r\n        (contact.length !== 0) ?\r\n        this.setState({ contact: contact }) : \r\n        this.setState({ contact: \"\" }) \r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        if (!this.state.article || !this.state.typeofarticle || !this.state.index \r\n            || !this.state.quantity || !this.state.unitcost || !this.state.unitsize)\r\n        {   \r\n            return this.setState({\r\n                isError: true \r\n            });\r\n        }\r\n\r\n        const lastId = this.state.lastRequest[0];\r\n        const newId = lastId.id + 1; \r\n    \r\n        const newRequest = {\r\n            id: newId,  \r\n            //...values,\r\n            article: this.state.article,\r\n            typeofarticle: this.state.typeofarticle, \r\n            index: this.state.index, \r\n            quantity: this.state.quantity,\r\n            unitcost: this.state.unitcost,\r\n            unitsize: this.state.unitsize, \r\n            vendor: this.state.vendor, \r\n            contact: this.state.contact, \r\n            registrationdate: new Date().toISOString(),\r\n            registrationuser: this.props.auth.user.name\r\n        };\r\n\r\n        this.props.saveItem(newRequest);\r\n\r\n        const actualPage = this.props.instock.page;\r\n        this.props.fetchInStock(actualPage);\r\n\r\n        this.toggleModal();\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return(\r\n            <div>\r\n                <Button outline onClick={this.toggleModal}>\r\n                    <span className=\"text-info\">Add an existing item</span> \r\n                </Button>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}>\r\n                        <h4 className=\"text-primary\">Add an existing item</h4>\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <h5 className=\"text-info\">Mandatory Fields</h5>\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                            <FormGroup>\r\n                                <Label for=\"article\">Article: </Label>\r\n                                <Input type=\"text\" name=\"article\" id=\"article\" \r\n                                    value={this.state.location} onChange={this.onChangeArticle}\r\n                                    invalid={this.state.isError && !this.state.article}\r\n                                />\r\n                                {(this.state.isError && !this.state.article) ? (\r\n                                    <div>\r\n                                        <p className=\"text-danger\">Article description is required.</p>\r\n                                    </div>    \r\n                                ) : ( <div /> )}            \r\n                            </FormGroup>    \r\n                            <FormGroup>\r\n                                <Label for=\"index\">Index: </Label>\r\n                                <Input type=\"text\" name=\"index\" id=\"index\" \r\n                                    value={this.state.index} onChange={this.onChangeIndex}\r\n                                    invalid={this.state.isError && !this.state.index}\r\n                                />\r\n                                {(this.state.isError && !this.state.index) ? (\r\n                                    <div>\r\n                                        <p className=\"text-danger\">Index is required.</p>\r\n                                    </div>    \r\n                                ) : ( <div /> )}            \r\n                            </FormGroup>     \r\n                            <div className=\"row\">\r\n                                <div className=\"col-sm-6\">\r\n                                    <FormGroup>\r\n                                        <Label for=\"quantity\">Quantity: </Label>\r\n                                        <Input type=\"number\" name=\"quantity\" id=\"quantity\" \r\n                                            value={this.state.quantity} onChange={this.onChangeQuantity}\r\n                                            invalid={this.state.isError && !this.state.quantity}\r\n                                        />\r\n                                        {(this.state.isError && !this.state.quantity) ? (\r\n                                            <div>\r\n                                                <p className=\"text-danger\">Quantity is required.</p>\r\n                                            </div>    \r\n                                        ) : ( <div /> )}            \r\n                                    </FormGroup> \r\n                                </div>\r\n                                <div className=\"col-sm-6\">\r\n                                    <FormGroup>\r\n                                        <Label for=\"unitcost\">Unit Cost: </Label>\r\n                                        <Input type=\"number\" name=\"unitcost\" id=\"unitcost\" \r\n                                            value={this.state.unitcost} \r\n                                            onChange={this.onChangeUnitcost}\r\n                                            placeholder=\"$\"\r\n                                            invalid={this.state.isError && !this.state.unitcost}\r\n                                        />    \r\n                                        {(this.state.isError && !this.state.unitcost) ? (\r\n                                            <div>\r\n                                                <p className=\"text-danger\">Unit Cost is required.</p>\r\n                                            </div>    \r\n                                        ) : ( <div /> )}            \r\n                                    </FormGroup>\r\n                                </div>\r\n                            </div> \r\n                            <div className=\"row\">\r\n                                <div className=\"col-sm-6\">\r\n                                    <FormGroup>\r\n                                        <Label for=\"unitsize\">Unit Size: </Label>\r\n                                        <Input type=\"text\" name=\"unitsize\" id=\"unitsize\"\r\n                                            onChange={this.onChangeUnitsize}\r\n                                            invalid={this.state.isError && !this.state.unitsize}\r\n                                        />\r\n                                        {(this.state.isError && !this.state.unitsize) ? (\r\n                                            <div>\r\n                                                <p className=\"text-danger\">Unit size is required.</p>\r\n                                            </div>    \r\n                                        ) : ( <div /> )}            \r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"col-sm-6\">\r\n                                    <FormGroup>\r\n                                        <Label for=\"typeofarticle\">Type of Article: </Label>\r\n                                        <Input type=\"select\" name=\"typeofarticle\" id=\"typeofarticle\"\r\n                                            onChange={this.onChangeType}\r\n                                            invalid={this.state.isError && this.state.typeofarticle === \"\"}\r\n                                        >    \r\n                                            <option value=\"\">Select</option>\r\n                                            <option value=\"reagents\">Reagents</option>\r\n                                            <option value=\"animal\">Animal Facilities</option>\r\n                                            <option value=\"consumables\">General Consumables</option>\r\n                                            <option value=\"microscope\">Microscope Accessories</option>\r\n                                        </Input>\r\n                                        {(this.state.isError && !this.state.typeofarticle) ? (\r\n                                            <div>\r\n                                                <p className=\"text-danger\">Type of Article is required.</p>\r\n                                            </div>    \r\n                                        ) : ( <div /> )}            \r\n                                    </FormGroup>\r\n                                </div>\r\n                            </div>  \r\n                            <br/>\r\n                            <h5 className=\"text-info\">Optional Fields</h5>\r\n                            <FormGroup>\r\n                                <Label for=\"vendor\">Vendor: </Label>\r\n                                <Input type=\"text\" name=\"vendor\" id=\"vendor\" \r\n                                    value={this.state.vendor} onChange={this.onChangeVendor}\r\n                                />\r\n                            </FormGroup> \r\n                            <FormGroup>\r\n                                <Label for=\"contact\">Contact: </Label>\r\n                                <Input type=\"text\" name=\"contact\" id=\"contact\" \r\n                                    value={this.state.contact} onChange={this.onChangeContact}\r\n                                />\r\n                            </FormGroup> \r\n                            <br/>\r\n                            <Button type=\"submit\" color=\"primary\">Submit</Button> \r\n                        </Form>                        \r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(InStockForm));",{"ruleId":"270","replacedBy":"271"},{"ruleId":"272","replacedBy":"273"},{"ruleId":"270","replacedBy":"274"},{"ruleId":"272","replacedBy":"275"},{"ruleId":"270","replacedBy":"276"},{"ruleId":"272","replacedBy":"277"},{"ruleId":"278","severity":1,"message":"279","line":12,"column":10,"nodeType":"280","messageId":"281","endLine":12,"endColumn":20},{"ruleId":"278","severity":1,"message":"282","line":34,"column":15,"nodeType":"280","messageId":"281","endLine":34,"endColumn":23},{"ruleId":"278","severity":1,"message":"279","line":13,"column":10,"nodeType":"280","messageId":"281","endLine":13,"endColumn":20},{"ruleId":"278","severity":1,"message":"283","line":8,"column":8,"nodeType":"280","messageId":"281","endLine":8,"endColumn":17},{"ruleId":"284","severity":1,"message":"285","line":58,"column":25,"nodeType":"286","endLine":58,"endColumn":47},{"ruleId":"270","replacedBy":"287"},{"ruleId":"272","replacedBy":"288"},{"ruleId":"289","severity":1,"message":"290","line":5,"column":1,"nodeType":"291","endLine":12,"endColumn":2},{"ruleId":"278","severity":1,"message":"292","line":17,"column":19,"nodeType":"280","messageId":"281","endLine":17,"endColumn":27},{"ruleId":"293","severity":1,"message":"294","line":32,"column":13,"nodeType":"295","messageId":"296","endLine":32,"endColumn":19},{"ruleId":"293","severity":1,"message":"294","line":37,"column":13,"nodeType":"295","messageId":"296","endLine":37,"endColumn":19},{"ruleId":"293","severity":1,"message":"294","line":40,"column":13,"nodeType":"295","messageId":"296","endLine":40,"endColumn":19},{"ruleId":"270","replacedBy":"297"},{"ruleId":"272","replacedBy":"298"},{"ruleId":"270","replacedBy":"299"},{"ruleId":"272","replacedBy":"300"},{"ruleId":"278","severity":1,"message":"301","line":410,"column":9,"nodeType":"280","messageId":"281","endLine":410,"endColumn":15},{"ruleId":"278","severity":1,"message":"302","line":18,"column":15,"nodeType":"280","messageId":"281","endLine":18,"endColumn":18},{"ruleId":"278","severity":1,"message":"303","line":3,"column":8,"nodeType":"280","messageId":"281","endLine":3,"endColumn":14},{"ruleId":"289","severity":1,"message":"290","line":11,"column":1,"nodeType":"291","endLine":27,"endColumn":2},{"ruleId":"270","replacedBy":"304"},{"ruleId":"272","replacedBy":"305"},{"ruleId":"278","severity":1,"message":"306","line":4,"column":8,"nodeType":"280","messageId":"281","endLine":4,"endColumn":13},{"ruleId":"278","severity":1,"message":"307","line":13,"column":7,"nodeType":"280","messageId":"281","endLine":13,"endColumn":15},{"ruleId":"278","severity":1,"message":"279","line":13,"column":10,"nodeType":"280","messageId":"281","endLine":13,"endColumn":20},{"ruleId":"278","severity":1,"message":"308","line":2,"column":35,"nodeType":"280","messageId":"281","endLine":2,"endColumn":40},{"ruleId":"278","severity":1,"message":"309","line":2,"column":42,"nodeType":"280","messageId":"281","endLine":2,"endColumn":48},{"ruleId":"310","severity":1,"message":"311","line":30,"column":106,"nodeType":"312","endLine":30,"endColumn":121},{"ruleId":"293","severity":1,"message":"294","line":29,"column":13,"nodeType":"295","messageId":"296","endLine":29,"endColumn":19},{"ruleId":"293","severity":1,"message":"294","line":46,"column":9,"nodeType":"295","messageId":"296","endLine":46,"endColumn":15},{"ruleId":"293","severity":1,"message":"294","line":49,"column":13,"nodeType":"295","messageId":"296","endLine":49,"endColumn":19},{"ruleId":"278","severity":1,"message":"313","line":2,"column":10,"nodeType":"280","messageId":"281","endLine":2,"endColumn":14},{"ruleId":"310","severity":1,"message":"311","line":21,"column":71,"nodeType":"312","endLine":21,"endColumn":86},{"ruleId":"310","severity":1,"message":"311","line":22,"column":69,"nodeType":"312","endLine":22,"endColumn":84},{"ruleId":"310","severity":1,"message":"311","line":23,"column":66,"nodeType":"312","endLine":23,"endColumn":81},{"ruleId":"310","severity":1,"message":"311","line":31,"column":105,"nodeType":"312","endLine":31,"endColumn":120},{"ruleId":"310","severity":1,"message":"311","line":32,"column":80,"nodeType":"312","endLine":32,"endColumn":95},{"ruleId":"293","severity":1,"message":"294","line":29,"column":13,"nodeType":"295","messageId":"296","endLine":29,"endColumn":19},{"ruleId":"293","severity":1,"message":"294","line":34,"column":9,"nodeType":"295","messageId":"296","endLine":34,"endColumn":15},{"ruleId":"293","severity":1,"message":"294","line":39,"column":9,"nodeType":"295","messageId":"296","endLine":39,"endColumn":15},{"ruleId":"293","severity":1,"message":"294","line":42,"column":13,"nodeType":"295","messageId":"296","endLine":42,"endColumn":19},{"ruleId":"293","severity":1,"message":"294","line":29,"column":13,"nodeType":"295","messageId":"296","endLine":29,"endColumn":19},{"ruleId":"293","severity":1,"message":"294","line":32,"column":13,"nodeType":"295","messageId":"296","endLine":32,"endColumn":19},{"ruleId":"278","severity":1,"message":"314","line":1,"column":17,"nodeType":"280","messageId":"281","endLine":1,"endColumn":26},{"ruleId":"278","severity":1,"message":"315","line":2,"column":11,"nodeType":"280","messageId":"281","endLine":2,"endColumn":17},{"ruleId":"278","severity":1,"message":"316","line":2,"column":57,"nodeType":"280","messageId":"281","endLine":2,"endColumn":66},{"ruleId":"278","severity":1,"message":"317","line":2,"column":68,"nodeType":"280","messageId":"281","endLine":2,"endColumn":76},{"ruleId":"278","severity":1,"message":"307","line":8,"column":7,"nodeType":"280","messageId":"281","endLine":8,"endColumn":15},"no-native-reassign",["318"],"no-negated-in-lhs",["319"],["318"],["319"],["318"],["319"],"no-unused-vars","'Transition' is defined but never used.","Identifier","unusedVar","'pageData' is assigned a value but never used.","'Accordion' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["318"],["319"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'requests' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode",["318"],["319"],["318"],["319"],"'params' is assigned a value but never used.","'url' is assigned a value but never used.","'Moment' is defined but never used.",["318"],["319"],"'axios' is defined but never used.","'isNumber' is assigned a value but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'Link' is defined but never used.","'Component' is defined but never used.","'Button' is defined but never used.","'CardTitle' is defined but never used.","'CardText' is defined but never used.","no-global-assign","no-unsafe-negation"]