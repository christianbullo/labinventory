[{"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\index.js":"1","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\App.js":"2","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\reportWebVitals.js":"3","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\dashboard\\Dashboard.js":"4","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\private-route\\PrivateRoute.js":"5","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\layout\\Navbar.js":"6","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\MainComponent.js":"7","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\OrderTable.js":"8","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\OutOfStockTable.js":"9","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\RequestTableRow.js":"10","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\RequestForm.js":"11","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\store.js":"12","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\actions\\ActionsTypes.js":"13","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\reducers\\index.js":"14","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\reducers\\authReducer.js":"15","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\reducers\\errorReducer.js":"16","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\actions\\ActionCreators.js":"17","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\utils\\setAuthToken.js":"18","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\layout\\Landing.js":"19","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\auth\\Register.js":"20","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\auth\\Login.js":"21","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\RequestTable.js":"22","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\StatsComponent.js":"23","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\HeaderComponent.js":"24","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\HomeComponent.js":"25"},{"size":776,"mtime":1612486611888,"results":"26","hashOfConfig":"27"},{"size":1581,"mtime":1612482407005,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":1608514499315,"results":"29","hashOfConfig":"27"},{"size":1586,"mtime":1612460854515,"results":"30","hashOfConfig":"31"},{"size":617,"mtime":1612460008224,"results":"32","hashOfConfig":"31"},{"size":3981,"mtime":1612463423397,"results":"33","hashOfConfig":"31"},{"size":2018,"mtime":1612490728046,"results":"34","hashOfConfig":"27"},{"size":1528,"mtime":1610395894826,"results":"35","hashOfConfig":"27"},{"size":1790,"mtime":1610500505181,"results":"36","hashOfConfig":"27"},{"size":1232,"mtime":1610521283157,"results":"37","hashOfConfig":"31"},{"size":11804,"mtime":1610520212123,"results":"38","hashOfConfig":"31"},{"size":465,"mtime":1612457297962,"results":"39","hashOfConfig":"27"},{"size":137,"mtime":1612456742388,"results":"40","hashOfConfig":"27"},{"size":215,"mtime":1612458261701,"results":"41","hashOfConfig":"31"},{"size":584,"mtime":1612458171446,"results":"42","hashOfConfig":"31"},{"size":278,"mtime":1612458223981,"results":"43","hashOfConfig":"27"},{"size":1741,"mtime":1612457484018,"results":"44","hashOfConfig":"27"},{"size":344,"mtime":1612456835311,"results":"45","hashOfConfig":"31"},{"size":1660,"mtime":1612458536469,"results":"46","hashOfConfig":"27"},{"size":5179,"mtime":1612491344181,"results":"47","hashOfConfig":"27"},{"size":4192,"mtime":1612459569329,"results":"48","hashOfConfig":"27"},{"size":2271,"mtime":1610518130504,"results":"49","hashOfConfig":"27"},{"size":3230,"mtime":1610519508340,"results":"50","hashOfConfig":"27"},{"size":6277,"mtime":1612491208565,"results":"51","hashOfConfig":"27"},{"size":3229,"mtime":1610561743401,"results":"52","hashOfConfig":"27"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"4kctrr",{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"685583",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"64"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\index.js",[],["110","111"],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\App.js",["112","113"],"import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { setCurrentUser, logoutUser } from \"./actions/ActionCreators\";\r\n\r\nimport jwt_decode from \"jwt-decode\";\r\nimport setAuthToken from \"./utils/setAuthToken\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";  \r\nimport './App.css';\r\n\r\nimport Main from \"./components/MainComponent\";\r\n\r\n// import Navbar from \"./components/layout/Navbar\";\r\n// import Landing from \"./components/layout/Landing\";\r\n// import Register from \"./components/auth/Register\";\r\n// import Login from \"./components/auth/Login\";\r\n// import PrivateRoute from \"./components/private-route/PrivateRoute\";\r\n// import Dashboard from \"./components/dashboard/Dashboard\";\r\n\r\n// Check for token to keep user logged in\r\nif (localStorage.jwtToken) {\r\n  // Set auth token header auth\r\n  const token = localStorage.jwtToken;\r\n  setAuthToken(token);\r\n  // Decode token and get user info and exp\r\n  const decoded = jwt_decode(token);\r\n  // Set user and isAuthenticated\r\n  store.dispatch(setCurrentUser(decoded));\r\n  // Check for expired token\r\n  const currentTime = Date.now() / 1000; // to get in milliseconds\r\n  if (decoded.exp < currentTime) {\r\n    // Logout user\r\n    store.dispatch(logoutUser());\r\n\r\n    // Redirect to login\r\n    window.location.href = \"./login\";\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <Router>\r\n          <Main />\r\n        </Router>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\reportWebVitals.js",[],["114","115"],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\dashboard\\Dashboard.js",[],["116","117"],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\private-route\\PrivateRoute.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\layout\\Navbar.js",["118"],"import React, { Component } from \"react\";\r\nimport { Nav, Navbar, NavbarBrand, NavbarToggler, Collapse, NavItem, Jumbotron } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isNavOpen: false\r\n        };\r\n        this.toggleNav = this.toggleNav.bind(this);\r\n    }\r\n\r\n    toggleNav() {\r\n        this.setState({\r\n            isNavOpen: !this.state.isNavOpen\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Jumbotron fluid>\r\n                    <div className=\"container text-white\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col\">\r\n                            </div>\r\n                            <div className=\"col\">\r\n                                <h1>Lab</h1>\r\n                            </div>\r\n                            <div className=\"col\">\r\n                            </div>\r\n                            <div className=\"col\">\r\n                                <br />\r\n                                <br />\r\n                                <h2>Inventory</h2> \r\n                            </div>\r\n                            <div className=\"col\">\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Jumbotron>\r\n                <Navbar dark sticky=\"top\" expand=\"md\">\r\n                    <div className=\"container justify-content-center\">\r\n                        {/* <NavbarBrand className=\"mr-auto\" href=\"/stats\">\r\n                            <i className=\"fa fa-bar-chart fa-lg\">{' '}Stats</i> \r\n                        </NavbarBrand> */}\r\n                        <NavbarToggler onClick={this.toggleNav} />   \r\n                        <Collapse isOpen={this.state.isNavOpen} navbar className=\"justify-content-center\">\r\n                            <Nav navbar justified className=\"justify-content-center\">                                \r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to=\"/register\">\r\n                                        <i className=\"fa fa-list-alt fa-lg\">{' '}<span className=\"roboto\">Signup</span></i>\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to=\"/orders\">\r\n                                        <i className=\"fa fa-truck fa-lg\">{' '}<span className=\"roboto\">------------</span></i>\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to=\"/login\">\r\n                                        <i className=\"fa fa-folder-open fa-lg\">{' '}<span className=\"roboto\">Login</span></i>\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to=\"/outofstock\">\r\n                                        <i className=\"fa fa-folder fa-lg\">{' '}<span className=\"roboto\">------------</span></i>\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to=\"/stats\">\r\n                                        <i className=\"fa fa-bar-chart fa-lg\">{' '}<span className=\"roboto\">---------</span></i>\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                        </Collapse> \r\n                    </div>\r\n                </Navbar>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\MainComponent.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\OrderTable.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\OutOfStockTable.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\RequestTableRow.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\RequestForm.js",["119","120","121","122","123","124","125","126","127"],"import React, { Component } from \"react\";\r\nimport { Button, Label, Modal, ModalHeader, ModalBody} from \"reactstrap\";\r\nimport { LocalForm, Control, Errors } from 'react-redux-form';\r\n\r\nconst required = val => val && val.length; \r\nconst maxLength = len => val => !val || (val.length <= len); \r\nconst minLength = len => val => val && (val.length >= len); \r\nconst isNumber = val => !isNaN(+val); \r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val); \r\n\r\nexport class RequestForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isModalOpen: false \r\n        };\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    \r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n    handleSubmit(values) {\r\n        this.toggleModal();\r\n        this.props.addRequest(values);\r\n        //console.log('Current state is: ' + JSON.stringify(values));\r\n        //alert('Current state is: ' + JSON.stringify(values));\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Button outline onClick={this.toggleModal}>\r\n                    <i className=\"fa fa-pencil fa-lg\" /> {' '} <span className=\"text-danger\">Create New Request</span> \r\n                </Button>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}>Submit Request</ModalHeader>\r\n                    <ModalBody>\r\n                        <LocalForm onSubmit={ (values) => this.handleSubmit(values) }>\r\n                            <div className=\"form-group\">\r\n                                <Label htmlFor=\"catalog\">Catalog No</Label>\r\n                                <Control.text className=\"form-control\" model=\".catalog\" id=\"catalog\" name=\"catalog\" \r\n                                    validators={{\r\n                                            required,\r\n                                            minLength: minLength(2),\r\n                                            maxLength: maxLength(15)\r\n                                        }}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".catalog\"\r\n                                    show=\"touched\"\r\n                                    component=\"div\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be at least 2 characters',\r\n                                        maxLength: 'Must be 15 characters or less'\r\n                                    }}\r\n                                /> \r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <Label htmlFor=\"product\">Product</Label>\r\n                                <Control.text className=\"form-control\" model=\".product\" id=\"product\" name=\"product\" \r\n                                    validators={{\r\n                                            required,\r\n                                            minLength: minLength(2),\r\n                                            maxLength: maxLength(30)\r\n                                        }}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".product\"\r\n                                    show=\"touched\"\r\n                                    component=\"div\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be at least 2 characters',\r\n                                        maxLength: 'Must be 30 characters or less'\r\n                                    }}\r\n                                /> \r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <Label htmlFor=\"radioactive\">Radioactive</Label>\r\n                                <Control.text className=\"form-control\" model=\".radioactive\" id=\"radioactive\" name=\"radioactive\" \r\n                                    validators={{\r\n                                            required,\r\n                                            maxLength: maxLength(1)\r\n                                        }}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".radioactive\"\r\n                                    show=\"touched\"\r\n                                    component=\"div\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        maxLength: 'Must be 1 characters (Y/N)'\r\n                                    }}\r\n                                /> \r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <Label htmlFor=\"quantity\">Quantity</Label>\r\n                                <Control.text className=\"form-control\" model=\".quantity\" id=\"quantity\" name=\"quantity\" \r\n                                    validators={{\r\n                                            required,\r\n                                            minLength: minLength(2),\r\n                                            maxLength: maxLength(30),\r\n                                            isNumber\r\n                                        }}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".quantity\"\r\n                                    show=\"touched\"\r\n                                    component=\"div\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be at least 2 characters',\r\n                                        maxLength: 'Must be 30 characters or less',\r\n                                        isNumber: 'Must be a number'\r\n                                    }}\r\n                                /> \r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <Label htmlFor=\"unitsize\">Unit size</Label>\r\n                                <Control.text className=\"form-control\" model=\".unitsize\" id=\"unitsize\" name=\"unitsize\" \r\n                                    validators={{\r\n                                            required,\r\n                                            minLength: minLength(2),\r\n                                            maxLength: maxLength(30)\r\n                                        }}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".unitsize\"\r\n                                    show=\"touched\"\r\n                                    component=\"div\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be at least 2 characters',\r\n                                        maxLength: 'Must be 30 characters or less'\r\n                                    }}\r\n                                /> \r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <Label htmlFor=\"unitcost\">Unit cost</Label>\r\n                                <Control.text className=\"form-control\" model=\".unitcost\" id=\"unitcost\" name=\"unitcost\" \r\n                                    validators={{\r\n                                            required,\r\n                                            minLength: minLength(2),\r\n                                            maxLength: maxLength(30)\r\n                                        }}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".unitcost\"\r\n                                    show=\"touched\"\r\n                                    component=\"div\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be at least 2 characters',\r\n                                        maxLength: 'Must be 30 characters or less'\r\n                                    }}\r\n                                /> \r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <Label htmlFor=\"totalcost\">Total cost</Label>\r\n                                <Control.text className=\"form-control\" model=\".totalcost\" id=\"totalcost\" name=\"totalcost\" \r\n                                    validators={{\r\n                                            required,\r\n                                            minLength: minLength(2),\r\n                                            maxLength: maxLength(30)\r\n                                        }}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".totalcost\"\r\n                                    show=\"touched\"\r\n                                    component=\"div\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be at least 2 characters',\r\n                                        maxLength: 'Must be 30 characters or less'\r\n                                    }}\r\n                                /> \r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <Label htmlFor=\"vendor\">Vendor name</Label>\r\n                                <Control.text className=\"form-control\" model=\".vendor\" id=\"vendor\" name=\"vendor\" \r\n                                    validators={{\r\n                                            required,\r\n                                            minLength: minLength(2),\r\n                                            maxLength: maxLength(30)\r\n                                        }}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".vendor\"\r\n                                    show=\"touched\"\r\n                                    component=\"div\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be at least 2 characters',\r\n                                        maxLength: 'Must be 30 characters or less'\r\n                                    }}\r\n                                /> \r\n                            </div>\r\n                            <Button type=\"submit\" color=\"primary\">Submit Request</Button> \r\n                        </LocalForm>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>            \r\n        );\r\n    }\r\n}\r\n","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\store.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\actions\\ActionsTypes.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\reducers\\index.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\reducers\\authReducer.js",["128"],"import * as ActionTypes from \"../actions/ActionsTypes\";\r\n\r\nconst isEmpty = require(\"is-empty\");\r\n\r\nconst initialState = {\r\n  isAuthenticated: false,\r\n  user: {},\r\n  loading: false\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_CURRENT_USER:\r\n      return {\r\n        ...state,\r\n        isAuthenticated: !isEmpty(action.payload),\r\n        user: action.payload\r\n      };\r\n    case ActionTypes.USER_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\reducers\\errorReducer.js",["129"],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\actions\\ActionCreators.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\utils\\setAuthToken.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\layout\\Landing.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\auth\\Register.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\auth\\Login.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\RequestTable.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\StatsComponent.js",[],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\HeaderComponent.js",["130"],"C:\\Full Stack Projects\\BioLab Inventory Project\\lab_inventory_project\\labinventory\\src\\components\\HomeComponent.js",[],{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":2,"column":35,"nodeType":"137","messageId":"138","endLine":2,"endColumn":40},{"ruleId":"135","severity":1,"message":"139","line":2,"column":42,"nodeType":"137","messageId":"138","endLine":2,"endColumn":48},{"ruleId":"131","replacedBy":"140"},{"ruleId":"133","replacedBy":"141"},{"ruleId":"131","replacedBy":"142"},{"ruleId":"133","replacedBy":"143"},{"ruleId":"135","severity":1,"message":"144","line":2,"column":23,"nodeType":"137","messageId":"138","endLine":2,"endColumn":34},{"ruleId":"135","severity":1,"message":"145","line":9,"column":7,"nodeType":"137","messageId":"138","endLine":9,"endColumn":17},{"ruleId":"146","severity":1,"message":"147","line":46,"column":33,"nodeType":"148","endLine":52,"endColumn":35},{"ruleId":"146","severity":1,"message":"147","line":67,"column":33,"nodeType":"148","endLine":73,"endColumn":35},{"ruleId":"146","severity":1,"message":"147","line":88,"column":33,"nodeType":"148","endLine":93,"endColumn":35},{"ruleId":"146","severity":1,"message":"147","line":107,"column":33,"nodeType":"148","endLine":114,"endColumn":35},{"ruleId":"146","severity":1,"message":"147","line":130,"column":33,"nodeType":"148","endLine":136,"endColumn":35},{"ruleId":"146","severity":1,"message":"147","line":151,"column":33,"nodeType":"148","endLine":157,"endColumn":35},{"ruleId":"146","severity":1,"message":"147","line":172,"column":33,"nodeType":"148","endLine":178,"endColumn":35},{"ruleId":"146","severity":1,"message":"147","line":193,"column":33,"nodeType":"148","endLine":199,"endColumn":35},{"ruleId":"149","severity":1,"message":"150","line":11,"column":1,"nodeType":"151","endLine":27,"endColumn":2},{"ruleId":"149","severity":1,"message":"150","line":5,"column":1,"nodeType":"151","endLine":12,"endColumn":2},{"ruleId":"135","severity":1,"message":"144","line":2,"column":23,"nodeType":"137","messageId":"138","endLine":2,"endColumn":34},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.",["152"],["153"],["152"],["153"],"'NavbarBrand' is defined but never used.","'validEmail' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]